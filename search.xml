<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CodeSnippets使用说明</title>
    <url>/2020/06/04/CodeSnippets%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h3 id="CodeSnippets"><a href="#CodeSnippets" class="headerlink" title="CodeSnippets"></a>CodeSnippets</h3><h3 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h3><ul>
<li>第一种 前往文件夹：<br>前往文件夹：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;UserData&#x2F;CodeSnippets</span><br></pre></td></tr></table></figure>
然后复制粘贴即可</li>
<li>第二种 执行脚本即可<br>进入到当前文件根目录。然后执行脚本即可。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh DMCodeSnippets.sh</span><br></pre></td></tr></table></figure>
如果没有权限,在终端添加<code>sudo</code>,输入电脑密码，执行脚本即可。<br><code>sudo sh  DMCodeSnippets.sh</code></li>
</ul>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><table>
<thead>
<tr>
<th>快捷方式</th>
<th>功能</th>
<th>实现</th>
</tr>
</thead>
<tbody><tr>
<td>DMArray</td>
<td>不可变数组的声明</td>
<td>@property (nonatomic, copy) NSArray *&lt;#array#&gt;;</td>
</tr>
<tr>
<td>DMBOOL</td>
<td>基本数据类型BOOL</td>
<td>@property (nonatomic, assign) BOOL  &lt;#bool#&gt;;</td>
</tr>
<tr>
<td>DMDictionary</td>
<td>不可变字典属性声明</td>
<td>@property (nonatomic, copy) NSDictionary *&lt;#dictionary#&gt;;</td>
</tr>
<tr>
<td>DMMutableDictInterface</td>
<td>可变字典属性声明</td>
<td>@property (nonatomic, strong) NSMutableDictionary *&lt;#mutableDictionary#&gt;;</td>
</tr>
<tr>
<td>DMMutableDictLazyLoading</td>
<td>可变字典懒加载</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMInteger</td>
<td>NSInteger基本数据类型</td>
<td>@property (nonatomic, assign) NSInteger  &lt;#integer#&gt;;</td>
</tr>
<tr>
<td>DMString</td>
<td>字符串声明</td>
<td>@property (nonatomic, copy) NSString *&lt;#string#&gt;;</td>
</tr>
<tr>
<td>DMMutableArrayInterface</td>
<td>可变数组声明</td>
<td>@property (nonatomic, strong) NSMutableArray *&lt;#mutableArray#&gt;;</td>
</tr>
<tr>
<td>DMMutableArrayLazyLoading</td>
<td>可变数组懒加载</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMLabelInterface</td>
<td>UILabel声明</td>
<td>@property (nonatomic, strong) UILabel *&lt;#contentLabel#&gt;;</td>
</tr>
<tr>
<td>DMLabelLazyLoading</td>
<td>UILabel懒加载</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMButtonInterface</td>
<td>UIButton声明</td>
<td>@property (nonatomic, strong) UIButton *&lt;#customBtn#&gt;;</td>
</tr>
<tr>
<td>DMButtonLazyLoading</td>
<td>UIButton懒加载</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMImageViewInterface</td>
<td>UIImageView声明</td>
<td>@property (nonatomic, strong) UIImageView *&lt;#iconImageView#&gt;;</td>
</tr>
<tr>
<td>DMImageViewLazyLoading</td>
<td>UIImageView懒加载</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMViewInterface</td>
<td>UIView声明</td>
<td>@property (nonatomic, strong) UIView *&lt;#contentView#&gt;;</td>
</tr>
<tr>
<td>DMViewLazyLoading</td>
<td>UIView懒加载</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMPragmaMark</td>
<td>pragmaMark</td>
<td>#pragma mark   - &lt;#infoMessage#&gt; -</td>
</tr>
<tr>
<td>DMWarning</td>
<td>warning，包括作者，以及warning描述</td>
<td>#warning   &lt;#author#&gt;   &lt;#messageDesc#&gt;</td>
</tr>
<tr>
<td>DMDispatchOnce</td>
<td>单例中dispatch_once写法</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMGCDAsyMain</td>
<td>异步回到主线程</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMWeakSelf</td>
<td>weak修饰写法</td>
<td>__weak typeof(self)weakSelf = self;</td>
</tr>
<tr>
<td>DMStrongSelf</td>
<td>strong修饰写法</td>
<td>__strong typeof(weakSelf)strongSelf = weakSelf;</td>
</tr>
<tr>
<td>DMLocalBlock</td>
<td>localBlock</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMInitMethod</td>
<td>初始化方法</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMLifecycle</td>
<td>vc生命周期</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMTableViewInterface</td>
<td>UITabeleView声明</td>
<td>@property (nonatomic, strong) UITableView *&lt;#tableView#&gt;;</td>
</tr>
<tr>
<td>DMTableViewLazyLoading</td>
<td>UITableView懒加载</td>
<td>实现见下面</td>
</tr>
<tr>
<td>DMCollectionViewInterface</td>
<td>UICollectionView声明</td>
<td>@property (nonatomic, strong) UICollectionView *&lt;#collectionView#&gt;;</td>
</tr>
<tr>
<td>DMCollectionViewLazyLoading</td>
<td>UICollectionView懒加载</td>
<td>实现见下面</td>
</tr>
</tbody></table>
<h4 id="DMButtonLazyLoading"><a href="#DMButtonLazyLoading" class="headerlink" title="DMButtonLazyLoading"></a>DMButtonLazyLoading</h4><p>实现：UIButton实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (UIButton *)&lt;#customBtn#&gt; &#123;</span><br><span class="line">    if (!&lt;#_customBtn#&gt;) &#123;</span><br><span class="line">        &lt;#_customBtn#&gt; &#x3D; [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">        [&lt;#_customBtn#&gt; setTitle:&lt;#(nullable NSString *)#&gt; forState:UIControlStateNormal];</span><br><span class="line">        [&lt;#_customBtn#&gt; setTitleColor:&lt;#(nullable UIColor *)#&gt; forState:UIControlStateNormal];</span><br><span class="line">        [&lt;#_customBtn#&gt; setBackgroundColor:&lt;#(UI_APPEARANCE_SELECTOR UIColor *)#&gt;];</span><br><span class="line">        [&lt;#_customBtn#&gt; addTarget:&lt;#(nullable id)#&gt; action:&lt;#(nonnull SEL)#&gt; forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    &#125;</span><br><span class="line">    return &lt;#_customBtn#&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DMDispatchOnce"><a href="#DMDispatchOnce" class="headerlink" title="DMDispatchOnce"></a>DMDispatchOnce</h4><p>实现：单例中dispatch_once写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  + (instancetype)sharedInstance &#123;</span><br><span class="line">      static dispatch_once_t onceToken;</span><br><span class="line">      dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">          &lt;#code#&gt;</span><br><span class="line">      &#125;);</span><br><span class="line">      return &lt;#expression#&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">#### DMGCDAsyMain</span><br><span class="line">实现：异步回到主线程</span><br></pre></td></tr></table></figure>
<p>dispatch_async(dispatch_get_main_queue(), ^{<br>       &lt;#code#&gt;<br>   });</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### DMImageViewLazyLoading</span><br><span class="line">实现：UIImageView懒加载</span><br></pre></td></tr></table></figure>
<ul>
<li><p>(UIImageView *)&lt;#iconImageView#&gt; {<br>  if (!&lt;#_iconImageView#&gt;) {</p>
<pre><code>  &lt;#_iconImageView#&gt; =[[UIImageView alloc]init];</code></pre>
<p>  }<br>  return &lt;#_iconImageView#&gt;;<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### DMInitMethod</span><br><span class="line">实现：初始化方法</span><br></pre></td></tr></table></figure></li>
<li><p>(instancetype)init {</p>
<p>  if (self = [super init]) {</p>
<p>  }<br>  return self;<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### DMLabelLazyLoading</span><br><span class="line">实现：UILabel懒加载</span><br></pre></td></tr></table></figure></li>
<li><p>(UILabel *)&lt;#contentLabel#&gt; {<br>  if (!&lt;#_contentLabel#&gt;) {</p>
<pre><code>  &lt;#_contentLabel#&gt; = [[UILabel alloc]initWithFrame:CGRectMake(&lt;#CGFloat x#&gt;, &lt;#CGFloat y#&gt;, &lt;#CGFloat width#&gt;, &lt;#CGFloat height#&gt;)];
  &lt;#_contentLabel#&gt;.backgroundColor = [UIColor clearColor];</code></pre>
<p>  }<br>  return &lt;#_contentLabel#&gt;;<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### DMLifecycle</span><br><span class="line">实现：vc生命周期</span><br></pre></td></tr></table></figure>
</li>
<li><p>(void)pageInit {<br>  [super pageInit];</p>
</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageWillForwardToMe {<br>  [super pageWillForwardToMe];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageDidForwardToMe {<br>  [super pageDidForwardToMe];</li>
</ul>
<p>}</p>
<ul>
<li>(void)viewDidLoad {<br>  [super viewDidLoad];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageWillBeShown {<br>  [super pageWillBeShown];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageDidShown {<br>  [super pageDidShown];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageWillForwardFromMe {<br>  [super pageWillForwardFromMe];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageDidForwardFromMe {<br>  [super pageDidForwardFromMe];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageWillBackwardFromMe {<br>  [super pageWillBackwardFromMe];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageDidBackwardFromMe {<br>  [super pageDidBackwardFromMe];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageWillBackwardToMe {<br>  [super pageWillBackwardToMe];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageDidBackwardToMe {<br>  [super pageDidBackwardToMe];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageWillBeHidden {<br>  [super pageWillBeHidden];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageDidHidden {<br>  [super pageDidHidden];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageDestroy {<br>  [super pageDestroy];</li>
</ul>
<p>}</p>
<ul>
<li>(void)pageReload {<br>  [super pageReload];</li>
</ul>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### DMLocalBlock</span><br><span class="line">实现：localBlock</span><br></pre></td></tr></table></figure>
<p>&lt;#returnType#&gt;(^&lt;#blocKname#&gt;)(&lt;#parameterTypes#&gt;) = ^&lt;#returnType#&gt; (&lt;#parameters#&gt;) {<br>    &lt;#statements#&gt;<br>    };</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### DMMutableArrayLazyLoading</span><br><span class="line">实现：可变数组懒加载</span><br></pre></td></tr></table></figure>
<ul>
<li>(NSMutableArray *)&lt;#mutableArray#&gt; {<br>  if (!&lt;#_mutableArray#&gt;) {<pre><code>  &lt;#_mutableArray#&gt; = [NSMutableArray array];</code></pre>
  }<br>  return &lt;#_mutableArray#&gt;;<br>}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### DMMutableDictLazyLoading</span><br><span class="line">实现：可变字典懒加载</span><br></pre></td></tr></table></figure></li>
<li>(NSMutableDictionary *)&lt;#mutableDictionary#&gt; {<br>  if (!&lt;#_mutableDictionary#&gt;) {<pre><code>  &lt;#_mutableDictionary#&gt; = [NSMutableDictionary dictionary];</code></pre>
  }<br>  return &lt;#_mutableDictionary#&gt;;<br>}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### DMViewLazyLoading</span><br><span class="line">实现：UIView懒加载</span><br></pre></td></tr></table></figure></li>
<li>(UIView *)&lt;#contentView#&gt; {<br>  if (!&lt;#_contentView#&gt;) {<pre><code>  &lt;#_contentView#&gt; = [[UIView alloc]initWithFrame:CGRectMake(&lt;#CGFloat x#&gt;, &lt;#CGFloat y#&gt;, &lt;#CGFloat width#&gt;, &lt;#CGFloat height#&gt;)];
  &lt;#_contentView#&gt;.backgroundColor = [UIColor clearColor];</code></pre>
  }<br>  return &lt;#_contentView#&gt;;<br>}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># DMTableViewLazyLoading</span><br><span class="line">实现：UITableView懒加载</span><br></pre></td></tr></table></figure></li>
<li>(UITableView *)&lt;#tableView#&gt; {<br>  if (!&lt;#_tableView#&gt;) {<pre><code>  &lt;#_tableView#&gt; = [[UITableView alloc]initWithFrame:&lt;#(CGRect)#&gt; style:UITableViewStylePlain];
  &lt;#_tableView#&gt;.delegate = self;
  &lt;#_tableView#&gt;.dataSource = self;
  [self.view addSubview:&lt;#_tableView#&gt;];
  [&lt;#_tableView#&gt; mas_makeConstraints:^(MASConstraintMaker *make) &#123;
      make.edges.insets(UIEdgeInsetsMake(&lt;#CGFloat top#&gt;, &lt;#CGFloat left#&gt;, &lt;#CGFloat bottom#&gt;, &lt;#CGFloat right#&gt;));
  &#125;];</code></pre>
  }<br>  return &lt;#_tableView#&gt;;<br>}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># DMCollectionViewLazyLoading</span><br><span class="line">实现：UICollectionView懒加载</span><br></pre></td></tr></table></figure></li>
<li>(UICollectionView *)&lt;#collectionView#&gt; {<br>  if (!&lt;#_collectionView#&gt;) {<pre><code>  &lt;#_collectionView#&gt; = [[UICollectionView alloc]initWithFrame:&lt;#(CGRect)#&gt; collectionViewLayout:&lt;#(nonnull UICollectionViewLayout *)#&gt;];
  &lt;#_collectionView#&gt;.delegate = self;
  &lt;#_collectionView#&gt;.dataSource = self;
  [self.view addSubview:&lt;#_collectionView#&gt;];
  [&lt;#_collectionView#&gt; mas_makeConstraints:^(MASConstraintMaker *make) &#123;
      make.edges.insets(UIEdgeInsetsMake(&lt;#CGFloat top#&gt;, &lt;#CGFloat left#&gt;, &lt;#CGFloat bottom#&gt;, &lt;#CGFloat right#&gt;));
  &#125;];</code></pre>
  }<br>  return &lt;#_collectionView#&gt;;<br>}<pre><code></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>KVC实现原理分析</title>
    <url>/2020/09/03/KVC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="KVC实现原理分析"><a href="#KVC实现原理分析" class="headerlink" title="KVC实现原理分析"></a>KVC实现原理分析</h2><h3 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h3><ol>
<li>KVC在进行存取的时候，是怎么进行查找赋值的？</li>
<li>KVC的keypath中集合运算符是如何使用的？</li>
<li>使用KVC的时候如果setvalue的属性没有实现会怎样？</li>
</ol>
<h3 id="KVC是什么？"><a href="#KVC是什么？" class="headerlink" title="KVC是什么？"></a>KVC是什么？</h3><ul>
<li>KVC全称是Key value coding，定义在NSKeyValueCoding.h文件中，是一个非正式协议。</li>
<li>KVC提供了一种间接访问属性方法/成员变量的机制。我们可以通过字符串来访问对应的属性方法或者成员变量。</li>
<li>KVC的实现依赖其搜索规则。</li>
</ul>
<h3 id="KVC的访问方法"><a href="#KVC的访问方法" class="headerlink" title="KVC的访问方法"></a>KVC的访问方法</h3><ul>
<li>在NSKeyValueCoding中我们可以看到提供了KVC的通用访问方法，getter方法：valueForKey:以及setter方法：setValue:forKey，以及其衍生出来的keyPath方法。</li>
<li>这两个方法由KVC提供了默认的实现。也可以重写对应的方法来更改实现。</li>
</ul>
<h3 id="操作对象"><a href="#操作对象" class="headerlink" title="操作对象"></a>操作对象</h3><p>KVC主要针对三种类型进行操作，基础数据类型，对象和集合类型。</p>
<h3 id="KVC的集合操作符运算"><a href="#KVC的集合操作符运算" class="headerlink" title="KVC的集合操作符运算"></a>KVC的集合操作符运算</h3><ul>
<li>@sum 求和运算 比如@sum.classNumber</li>
<li>@avg 求平均值运算 比如@avg.classNumber</li>
<li>@count 求集合中元素的个数 比如@count</li>
</ul>
<h3 id="搜索规则"><a href="#搜索规则" class="headerlink" title="搜索规则"></a>搜索规则</h3><ul>
<li>KVC在通过key和keypath进行操作的时候，可以查找属性方法，成员变量。查找的时候可以兼容多种命名，查找的规则官方文档有介绍。</li>
<li>在KVC的实现中，依赖了<code>setter</code>和<code>getter</code>方法的实现。方法的命名要符合apple的规范。</li>
</ul>
<h4 id="关键属性accessInstanceVariablesDirectly"><a href="#关键属性accessInstanceVariablesDirectly" class="headerlink" title="关键属性accessInstanceVariablesDirectly"></a>关键属性accessInstanceVariablesDirectly</h4><p>这个属性表示是否允许读取实例变量的值，如果设置为YES,表明在KVC的查找中，从内存中读取实例变量的值。（在没有找到存取器的时候才会调用该方法）。</p>
<h3 id="基础getter搜索模式"><a href="#基础getter搜索模式" class="headerlink" title="基础getter搜索模式"></a>基础getter搜索模式</h3><ol>
<li>这种搜索模式是valueForKey:的默认实现，给定一个key作为参数</li>
<li>通过<code>getter</code>方法搜索实例，依次匹配  <code>get&lt;key&gt;</code>  <code>&lt;key&gt; </code> <code>is&lt;key&gt;</code> <code> _&lt;key&gt;</code> 如果找到，直接返回。需要注意的是：如果返回的是对象指针类型，直接返回结果，如果返回的是NSNumber转化所支持的变量之一，返回一个NSNumber否则返回的是NSValue。</li>
<li>当没有找到getter方法的时候，调用<code>accessInstanceVariablesDirectly</code>询问，如果返回<code>yes</code>，从<code>_&lt;key&gt;`` _is&lt;key&gt;</code> <code>&lt;key&gt;</code> <code>is&lt;key&gt;</code>中查找对应的值。如果返回NO结束查找，并调用<code>valueForUndefindedKey</code>异常。</li>
</ol>
<h3 id="基础setter搜索模式"><a href="#基础setter搜索模式" class="headerlink" title="基础setter搜索模式"></a>基础setter搜索模式</h3><ol>
<li>这种搜索模式是<code>setValue:forKey</code>的默认实现，给定输入的value和key。在调用对象的内部，设置属性名为key的<code>value</code>。</li>
<li>查找<code>set&lt;key&gt;:</code>或者<code>_set&lt;key&gt;</code>命名的setter。按照这个顺序，如果找到的话，调用这个方法执行。</li>
<li>如果设置的<code>setter</code>但是<code>accessInstanceVariablesDirectly</code>返回YES,那么查找的命名规则为<code>_&lt;key&gt; _is&lt;key&gt; &lt;key&gt; is&lt;key&gt;</code>的实例变量。根据这个顺序将value赋值给实例变量。</li>
<li>如果没有发现setter或实例变量。调用<code>setValueForUndefinedKey</code>并抛出异常。</li>
</ol>
<h3 id="KVC的性能"><a href="#KVC的性能" class="headerlink" title="KVC的性能"></a>KVC的性能</h3><p>从上面的描述中可以看出：KVC的性能访问属性并没有直接访问快，因为他是按照搜索规则进行搜索。所以我们在使用的时候，最好不 要手动设置<code>setter``和getter</code> 方法这样会导致搜索的步骤变长。本质上是操作方法列表以及在内存中去查找实例变量。这个操作对readonly和protected的成员变量，都可以正常访问。如果不想在外界访问的话，可以将<code>accessInstanceVariableDirectly</code>设置为NO。</p>
<h3 id="KVC缺点"><a href="#KVC缺点" class="headerlink" title="KVC缺点"></a>KVC缺点</h3><ul>
<li>因为我们在操作的时候传入<code>setvalueForKey</code>以及<code>setvalueForKeyPath valueForKey</code>以及<code>keyPath</code>是一个字符串。编译器在编译的时候不会报错，但是在运行的时候，如果设置或者获取的属性不存在就会报undefinedKey异常。</li>
<li>例如：在 iOS13之前我们可以通过改变私有变量的属性来更改一些设置。比如更改textField的颜色属性。iOS13之后更改的时候debug模式下会crash。</li>
</ul>
<h3 id="JsonModel中的使用"><a href="#JsonModel中的使用" class="headerlink" title="JsonModel中的使用"></a>JsonModel中的使用</h3><p>主要是通过KVC进行赋值，例如在赋值的时候，循环遍历model中每一个解析出来的property结构，从dic中拿出对应的value，进行一系列的判断。如果value可用，就进行赋值。如果对应的property是一个jsonmodel的时候，就递归先将子model进行整理解析。如果包含protocol字段，表明是一个array或者dictionary。然后将这个protocol字段的对象解析。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用说明</title>
    <url>/2020/09/02/hexo%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<p>// submit &amp; preview<br>hexo g &amp;&amp; hexo s</p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>RunLoop实现原理分析</title>
    <url>/2020/09/05/Runloop%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Runloop"><a href="#Runloop" class="headerlink" title="Runloop"></a>Runloop</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>RunLoop是通过内部维护的事件循环(Event Loop)来对事件/消息进行管理的一个对象。App主线程不退出就是用到了Event Loop。</p>
<ul>
<li>保持程序持续运行</li>
<li>监听输入源，进行调度处理app各种事件（touch/timer/performSelector/异步回调）</li>
<li>节省cpu资源</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gietsitlo3j31l60t41kx.jpg" alt="截屏2020-09-03 上午9.15.01"></p>
<p>RunLoop 会接收两种类型的输入源：一种是来自另一个线程或者来自不同应用的异步消息；另一种是来自预订时间或者重复间隔的同步事件。</p>
<blockquote>
<p>macOS/iOS系统中提供了两个对象：<strong>NSRunLoop</strong>和<strong>CFRunLoopRef</strong>。</p>
<ul>
<li><strong>CFRunLoopRef</strong>在<strong>CoreFoundation</strong>框架中，提供了纯C函数的API，并且所有API都是<strong>线程安全</strong>的。</li>
<li><strong>NSRunLoop</strong>则是基于<strong>CFRunLoopRef</strong>的封装，提供面向对象的API，但是这些API是<strong>非线程安全</strong>的。</li>
</ul>
</blockquote>
<h4 id="和线程关系"><a href="#和线程关系" class="headerlink" title="和线程关系"></a>和线程关系</h4><ul>
<li><p>线程和RunLoop是一一对应的,其映射关系是保存在一个全局的 Dictionary 里</p>
</li>
<li><p>自己创建的线程默认是没有开启RunLoop的</p>
</li>
<li><p>UIApplicationMain内部默认开启了主线程的RunLoop，不断地接收处理消息以及等待休眠，所以运行程序之后会保持持续运行状态。</p>
<p>线程和runloop映射关系关键代码如下（<a href="https://opensource.apple.com/tarballs/CF/">Runloop源码</a>）</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CFMutableDictionaryRef dict = CFDictionaryCreateMutable(kCFAllocatorSystemDefault, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">    CFRunLoopRef mainLoop = __CFRunLoopCreate(pthread_main_thread_np());</span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    CFDictionarySetValue(dict, pthreadPointer(pthread_main_thread_np()), mainLoop);</span><br></pre></td></tr></table></figure>



<h2 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h2><p>内部结构如下： </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">pthread_t</span> _pthread;                  <span class="comment">//持有的线程对象             </span></span><br><span class="line">    CFMutableSetRef  _commonModes;       <span class="comment">//模式名称字符串集合</span></span><br><span class="line">    CFMutableSetRef  _commonModeItems;   <span class="comment">//由Observer,Timer,Source集合构成</span></span><br><span class="line">    CFRunLoopModeRef _currentMode;</span><br><span class="line">    CFMutableSetRef  _modes;             <span class="comment">//多个运行模式集合</span></span><br><span class="line">		...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    CFStringRef _name;                   <span class="comment">//// Mode Name, 例如 @&quot;kCFRunLoopDefaultMode&quot;</span></span><br><span class="line">    CFMutableSetRef _sources0;           <span class="comment">//处理APP内部事件，APP自己负责，管理触发</span></span><br><span class="line">    CFMutableSetRef _sources1;           <span class="comment">//由runloop和内核管理，包含一个  mach_port（处理端口类的消息）和一个回调（函数指针），被用于通过内核和其他线程互发消息，这种source能主动唤醒runloop的线程</span></span><br><span class="line">    CFMutableArrayRef _observers;</span><br><span class="line">    CFMutableArrayRef _timers; </span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>CommonModes</strong>：一个<code>Mode</code>可以将自己标记为<code>Common</code>属性（通过将其<code>ModeName</code>添加到<code>RunLoop</code>的<code>commonModes</code>中）。每当<code>RunLoop</code>的内容发生变化时，<code>RunLoop</code>都会自动将 <code>_commonModeItems</code>里的<code>Source/Observer/Timer</code>同步到具有<code>Common</code>标记的所有<code>Mode</code>里。</p>
<blockquote>
<p>主线程的<code>RunLoop</code>里有两个公开预置的<code>Mode</code>,可以用这两个<code>Mode Name</code>来操作其对应的<code>Mode</code>：</p>
<ul>
<li><code>kCFRunLoopDefaultMode</code></li>
<li><code>UITrackingRunLoopMode</code></li>
</ul>
<p>这两个<code>Mode</code>都已经被标记为<code>Common</code>属性。<code>DefaultMode</code>是App平时所处的状态，<code>TrackingRunLoopMode</code>是追踪ScrollView滑动时的状态。当你创建一个<code>Timer</code>并加到<code>DefaultMode</code>时，<code>Timer</code>会得到重复回调，但此时滑动一个TableView时，<code>RunLoop</code>会将<code>mode</code>切换为<code>TrackingRunLoopMode</code>，这时<code>Timer</code>就不会被回调，并且也不会影响到滑动操作。</p>
<p>有时你需要一个<code>Timer</code>，在两个<code>Mode</code>中都能得到回调，一种办法就是将这个<code>Timer</code>分别加入这两个<code>Mode</code>。还有一种方式，就是将<code>Timer</code>加入到顶层的<code>RunLoop</code>的<code>commonModeItems</code>中。<code>commonModeItems</code>被<code>RunLoop</code>自动更新到所有具有<code>Common</code>属性的<code>Mode</code>里去。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="CFRunLoopMode-CFRunLoopModeRef"><a href="#CFRunLoopMode-CFRunLoopModeRef" class="headerlink" title="CFRunLoopMode(CFRunLoopModeRef)"></a>CFRunLoopMode(CFRunLoopModeRef)</h4><p>总共是有五种<code>CFRunLoopMode</code>:</p>
<ul>
<li><code>kCFRunLoopDefaultMode</code>：默认模式，主线程是在这个运行模式下运行</li>
<li><code>UITrackingRunLoopMode</code>：跟踪用户交互事件（用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他Mode影响）</li>
<li><code>UIInitializationRunLoopMode</code>：在刚启动App时第进入的第一个 Mode，启动完成后就不再使用</li>
<li><code>GSEventReceiveRunLoopMode</code>：接受系统内部事件，通常用不到</li>
<li><code>kCFRunLoopCommonModes</code>：伪模式，不是一种真正的运行模式，是同步Source/Timer/Observer到多个Mode中的一种解决方案</li>
</ul>
<p>一个RunLoop 对象中可能包含多个Mode，每次调用 RunLoop 的主函数时，只能指定其中一个 Mode(CurrentMode)。切换 Mode需要退出loop重新指定一个 Mode进入 。主要是为了分隔开不同的 Source、Timer、Observer，让它们之间互不影响。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gietsxahcdj31gk0s4dj9.jpg" alt="截屏2020-09-03 上午9.15.40"></p>
<h5 id="CFRunLoopSource"><a href="#CFRunLoopSource" class="headerlink" title="CFRunLoopSource"></a>CFRunLoopSource</h5><p>分为source0和source1两种</p>
<ul>
<li><p>sources0 :用户触发的事件。不能主动触发事件，需要手动唤醒线程，将当前线程从内核态切换到用户态。</p>
<p>使用时，需要先调用<code>CFRunLoopSourceSignal(source)</code>，将这个<code>Source</code>标记为待处理，然后手动调用<code>CFRunLoopWakeUp(runloop)</code>来唤醒<code>RunLoop</code>，让其处理这个事件。</p>
</li>
<li><p>sources1 :基于port的，包含一个 mach_port 和一个回调，可监听系统端口和通过内核和其他线程发送的消息，能主动唤醒RunLoop，接收分发系统事件</p>
</li>
</ul>
<h5 id="CFRunLoopTimer"><a href="#CFRunLoopTimer" class="headerlink" title="CFRunLoopTimer"></a>CFRunLoopTimer</h5><p>在预设的时间点唤醒RunLoop执行回调。基于RunLoop的，因此它不是实时的.</p>
<blockquote>
<p>CADisplayLink 是一个用于显示的定时器， 它可以让用户程序的显示与屏幕的硬件刷新保持同步，iOS系统中正常的屏幕刷新率为60Hz（60次每秒）。</p>
<p>FPS监测就是利用屏幕刷新的频率调用CADisplayLink指定的selector，就是说每次屏幕刷新的时候就调用selector，那么只要在selector方法里面统计每秒这个方法执行的次数，通过次数/时间就可以得出当前屏幕的刷新率了。</p>
</blockquote>
<h5 id="CFRunLoopObserver"><a href="#CFRunLoopObserver" class="headerlink" title="CFRunLoopObserver"></a>CFRunLoopObserver</h5><p>包含了一个回调(函数指针)，当<code>RunLoop</code>的状态发生变化时，观察者就能通过回调接受到这个变化。</p>
<p>可以观测的时间点有以下几个：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Run Loop Observer Activities */</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">CF_OPTIONS</span><span class="params">(CFOptionFlags, CFRunLoopActivity)</span> </span>&#123;</span><br><span class="line">    kCFRunLoopEntry = (<span class="number">1U</span>L &lt;&lt; <span class="number">0</span>),         <span class="comment">//RunLoop准备启动，即将进入loop</span></span><br><span class="line">    kCFRunLoopBeforeTimers = (<span class="number">1U</span>L &lt;&lt; <span class="number">1</span>),  <span class="comment">//触发 Timer 回调，RunLoop将要处理一些Timer相关事件</span></span><br><span class="line">    kCFRunLoopBeforeSources = (<span class="number">1U</span>L &lt;&lt; <span class="number">2</span>), <span class="comment">//触发 Source0 回调，RunLoop将要处理一些Source事件</span></span><br><span class="line">    kCFRunLoopBeforeWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">5</span>), <span class="comment">//等待 mach_port 消息，RunLoop将要进行休眠状态,即将由用户态切换到内核态</span></span><br><span class="line">    kCFRunLoopAfterWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">6</span>),  <span class="comment">//接收 mach_port 消息，RunLoop被唤醒，即从内核态切换到用户态</span></span><br><span class="line">    kCFRunLoopExit = (<span class="number">1U</span>L &lt;&lt; <span class="number">7</span>),          <span class="comment">//RunLoop退出</span></span><br><span class="line">    kCFRunLoopAllActivities = <span class="number">0x0FFFFFFF</span>U <span class="comment">//监听所有状态</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的<code>Source/Timer/Observer</code>被统称为 <strong>mode item</strong>，一个<code>item</code>可以被同时加入多个<code>mode</code>。如果一个<code>mode</code>中一个<code>item</code>都没有，则<code>RunLoop</code>会直接退出，不进入<code>Loop</code>。</p>
<p><code>CFRunLoop</code>对外暴露的管理 Mode 接口只有下面2个:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CFRunLoopAddCommonMode(CFRunLoopRef runloop, CFStringRef modeName);</span><br><span class="line">CFRunLoopRunInMode(CFStringRef modeName, ...);</span><br></pre></td></tr></table></figure>

<p>Mode 暴露的管理 mode item 的接口有下面几个：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef modeName);</span><br><span class="line">CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef modeName);</span><br><span class="line"></span><br><span class="line">CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);</span><br><span class="line">CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef modeName);</span><br><span class="line"></span><br><span class="line">CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef modeName);</span><br><span class="line">CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);</span><br></pre></td></tr></table></figure>

<p><code>mode</code>并不像<code>Source/Timer/Observer</code>一样有 Remove 方法，所以<code>mode</code>只能增加，不能减少。你只能通过 <code>modeName</code> 来操作内部的 mode，当你传入一个新的<code>modeName</code> 但 RunLoop 内部没有对应 mode 时，RunLoop会自动帮你创建对应的 <code>CFRunLoopModeRef</code>。</p>
<h3 id="三、内部实现"><a href="#三、内部实现" class="headerlink" title="三、内部实现"></a>三、内部实现</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1giettavhy8j30xc0poahf.jpg" alt="3344530-0f941859d3fbd597"></p>
<p>大致逻辑为：<br>1、通知observers RunLoop 即将启动。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// **1.通知Observers：RunLoop即将进入loop</span></span><br><span class="line">    <span class="keyword">if</span> (currentMode-&gt;_observerMask &amp; kCFRunLoopEntry ) __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopEntry);</span><br><span class="line">    <span class="comment">//进入loop循环</span></span><br><span class="line">    result = __CFRunLoopRun(rl, currentMode, seconds, returnAfterSourceHandled, previousMode);</span><br></pre></td></tr></table></figure>

<p>开启一个 do while 来保活线程.</p>
<p>2、通知观察者即将要处理Timer事件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通知 Observers RunLoop 会触发 Timer 回调</span></span><br><span class="line"><span class="keyword">if</span> (currentMode-&gt;_observerMask &amp; kCFRunLoopBeforeTimers)</span><br><span class="line">    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);</span><br></pre></td></tr></table></figure>

<p>3、通知观察者即将要处理source0事件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 通知 Observers RunLoop 会触发 Source0 回调</span><br><span class="line">if (currentMode-&gt;_observerMask &amp; kCFRunLoopBeforeSources)</span><br><span class="line">    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);</span><br><span class="line">    &#x2F;&#x2F; 执行 block</span><br><span class="line">__CFRunLoopDoBlocks(runloop, currentMode);</span><br></pre></td></tr></table></figure>

<p>4、处理source0事件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RunLoop触发Source0(非port)回调</span></span><br><span class="line">        Boolean sourceHandledThisLoop = __CFRunLoopDoSources0(rl, rlm, stopAfterHandle);</span><br></pre></td></tr></table></figure>

<p>5、如果基于端口的源(Source1)准备好并处于等待状态，进入步骤9。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__CFRunLoopServiceMachPort(dispatchPort, &amp;msg,       <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort, <span class="number">0</span>, &amp;voucherState, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">                <span class="keyword">goto</span> handle_msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、通知观察者线程即将进入休眠状态。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Boolean poll = sourceHandledThisLoop || (<span class="number">0U</span>LL == timeout_context-&gt;termTSR);</span><br><span class="line"><span class="keyword">if</span> (!poll &amp;&amp; (currentMode-&gt;_observerMask &amp; kCFRunLoopBeforeWaiting)) &#123;</span><br><span class="line">    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、将线程置于休眠状态，由用户态切换到内核态，直到下面的任一事件发生才唤醒线程。</p>
<ul>
<li><p>一个基于 port 的Source1 的事件。</p>
</li>
<li><p>Timer 时间到了。</p>
</li>
<li><p>RunLoop超时。</p>
</li>
<li><p>被其他调用者手动唤醒。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    __CFRunLoopServiceMachPort(waitSet, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort) &#123;</span><br><span class="line">        <span class="comment">// 基于 port 的 Source 事件、调用者唤醒</span></span><br><span class="line">        <span class="keyword">if</span> (modeQueuePort != MACH_PORT_NULL &amp;&amp; livePort == modeQueuePort) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Timer 时间到、RunLoop 超时</span></span><br><span class="line">        <span class="keyword">if</span> (currentMode-&gt;_timerFired) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>8、通知观察者线程将被唤醒。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!poll &amp;&amp; (currentMode-&gt;_observerMask &amp; kCFRunLoopAfterWaiting))</span><br><span class="line">    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);</span><br></pre></td></tr></table></figure>

<p>9、处理唤醒时收到的事件。</p>
<ul>
<li><p>如果用户定义的定时器启动，处理定时器事件并重启RunLoop。进入步骤2。</p>
</li>
<li><p>如果输入源启动，传递相应的消息。</p>
</li>
<li><p>如果RunLoop被显示唤醒而且时间还没超时，重启RunLoop。进入步骤2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">handle_msg:</span><br><span class="line"><span class="comment">// 如果 Timer 时间到，就触发 Timer 回调</span></span><br><span class="line"><span class="keyword">if</span> (msg-is-timer) &#123;</span><br><span class="line">    __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 如果 dispatch 就执行 block</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (msg_is_dispatch) &#123;</span><br><span class="line">    __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Source1 事件的话，就处理这个事件</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);</span><br><span class="line">    sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);</span><br><span class="line">    <span class="keyword">if</span> (sourceHandledThisLoop) &#123;</span><br><span class="line">        mach_msg(reply, MACH_SEND_MSG, reply);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>判断当前RunLoop状态值，是否停止或继续下一个loop。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">     &#x2F;&#x2F; 事件已处理完</span><br><span class="line">    retVal &#x3D; kCFRunLoopRunHandledSource;</span><br><span class="line">&#125; else if (timeout) &#123;</span><br><span class="line">    &#x2F;&#x2F; 超时</span><br><span class="line">    retVal &#x3D; kCFRunLoopRunTimedOut;</span><br><span class="line">&#125; else if (__CFRunLoopIsStopped(runloop)) &#123;</span><br><span class="line">    &#x2F;&#x2F; 外部调用者强制停止</span><br><span class="line">    retVal &#x3D; kCFRunLoopRunStopped;</span><br><span class="line">&#125; else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) &#123;</span><br><span class="line">    &#x2F;&#x2F; mode 为空，RunLoop 结束</span><br><span class="line">    retVal &#x3D; kCFRunLoopRunFinished;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>10、通知观察者RunLoop结束</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// **10.通知Observers：RunLoop即将退出loop</span></span><br><span class="line">    <span class="keyword">if</span> (currentMode-&gt;_observerMask &amp; kCFRunLoopExit ) __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class="line"></span><br><span class="line">        __CFRunLoopModeUnlock(currentMode);</span><br><span class="line">        __CFRunLoopPopPerRunData(rl, previousPerRun);</span><br><span class="line">    rl-&gt;_currentMode = previousMode;</span><br><span class="line">    __CFRunLoopUnlock(rl);</span><br></pre></td></tr></table></figure>

<p>整个流程如下图：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1giettlm3udj31hc0u00x8.jpg" alt="5f51c5e05085badb689f01b1e63e1c7d"></p>
<h2 id="四、应用"><a href="#四、应用" class="headerlink" title="四、应用"></a>四、应用</h2><h4 id="监测卡顿"><a href="#监测卡顿" class="headerlink" title="监测卡顿"></a>监测卡顿</h4><p>导致卡顿问题主要几个原因：</p>
<ul>
<li>复杂 UI 、图文混排的绘制量过大；</li>
<li>在主线程上做网络同步请求；</li>
<li>在主线程做大量的 IO 操作；</li>
<li>运算量过大，CPU 持续高占用；</li>
<li>死锁和主子线程抢锁。</li>
</ul>
<p>线程的消息事件是依赖于 NSRunLoop 的，所以从 NSRunLoop 入手，就可以知道主线程上都调用了哪些方法。我们通过监听 NSRunLoop 的6种状态，就能够发现调用方法是否执行时间过长，从而判断出是否会出现卡顿。</p>
<p>如果 RunLoop 的线程，进入睡眠前方法的执行时间过长而导致无法进入睡眠，或者线程唤醒后接收消息时间过长而无法进入下一步的话，就可以认为是线程受阻了。如果这个线程是主线程的话，表现出来的就是出现了卡顿。</p>
<p>所以，如果我们要利用 RunLoop 原理来监控卡顿的话，就是要关注这两个阶段。RunLoop 在进入睡眠之前和唤醒后的两个 loop 状态定义的值，分别是 <code>kCFRunLoopBeforeSources </code>（触发 Source0 回调，RunLoop将要处理一些Source事件）和 <code>kCFRunLoopAfterWaiting</code> （接收 mach_port 消息，RunLoop被唤醒，即从内核态切换到用户态），也就是要触发 Source0 回调和接收 mach_port 消息两个状态。</p>
<blockquote>
<p>监测FPS也可以粗略监测卡顿，FPS 是一秒显示的帧数，也就是一秒内画面变化数量。</p>
<p>人眼在24帧就感觉还是很流畅，感受不到卡顿，所以通过FPS监控卡顿不太合适。</p>
</blockquote>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>创建一个观察者 runLoopObserver 添加到主线程 RunLoop 的 common 模式下观察。</p>
<p>然后，创建一个持续的子线程专门用来监控主线程的 RunLoop 状态。</p>
<p>一旦发现进入睡眠前的 kCFRunLoopBeforeSources 状态，或者唤醒后的状态 kCFRunLoopAfterWaiting，在设置的时间阈值内一直没有变化，即可判定为卡顿。接下来，我们就可以打印堆栈的信息。</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> semaphoreWait = dispatch_semaphore_wait(dispatchSemaphore, dispatch_time(DISPATCH_TIME_NOW, <span class="number">3</span> * NSEC_PER_SEC));</span><br></pre></td></tr></table></figure>

<p>NSEC_PER_SEC，代表的是触发卡顿的时间阈值，单位是秒,这里设置成3s。</p>
<p>触发卡顿的时间阈值根据 WatchDog 机制来设置.</p>
<p>WatchDog 在不同状态下设置的不同时间，如下所示：启动（Launch）：20s；恢复（Resume）：10s；挂起（Suspend）：10s；退出（Quit）：6s；后台（Background）：3min（在 iOS 7 之前，每次申请 10min； 之后改为每次申请 3min，可连续申请，最多申请到 10min）。</p>
<p>通过 WatchDog 设置的时间，可以把启动的阈值设置为 10 秒，其他状态则都默认设置为 3 秒。总的原则就是，要小于 WatchDog 的限制时间。这个阈值也不用小得太多，原则就是要优先解决用户感知最明显的体验问题。</p>
</blockquote>
<h2 id="五、底层实现"><a href="#五、底层实现" class="headerlink" title="五、底层实现"></a>五、底层实现</h2><p>RunLoop在没有消息处理时，休眠已避免资源占用，由用户态切换到内核态(CPU-内核态和用户态)；当有消息需要处理时，立刻被唤醒，由内核态切换到用户态。</p>
<p><code>RunLoop</code>的核心是基于<code>mach port</code>的，其进入休眠时调用的函数是<code>mach_msg()</code>。</p>
<p>内核态：系统中既有操作系统的程序，也由普通用户的程序。为了安全和稳定性操作系统的程序不能随便访问,这就是内核态,内核态可以使用所有的硬件资源<br>用户态：不能直接使用系统资源，也不能改变CPU的工作状态，并且只能访问这个用户程序自己的存储空间</p>
<p>RunLoop这个机制是依靠系统内核来完成。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gietu0neptj30rw0i2acx.jpg" alt="1782258-e344f28cdf417b49"></p>
<blockquote>
<p>深入了解可以参考如下文章：</p>
<p> <a href="https://nshipster.com/inter-process-communication/">mach port使用</a>（<a href="https://segmentfault.com/a/1190000002400329">中文</a>）</p>
<p><a href="https://segmentfault.com/a/1190000002400329">Mach</a></p>
</blockquote>
<h2 id="六、文章参考"><a href="#六、文章参考" class="headerlink" title="六、文章参考"></a>六、文章参考</h2><blockquote>
<p><a href="https://blog.ibireme.com/2015/05/18/runloop/">深入理解RunLoop</a></p>
</blockquote>
<h4 id="Written-By-多点-移动运营研发部-白迎春"><a href="#Written-By-多点-移动运营研发部-白迎春" class="headerlink" title="Written By 多点-移动运营研发部-白迎春"></a>Written By 多点-移动运营研发部-白迎春</h4>]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS客户端布局浅谈</title>
    <url>/2020/12/16/iOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B8%83%E5%B1%80%E6%B5%85%E8%B0%88/</url>
    <content><![CDATA[<h2 id="iOS客户端布局浅谈"><a href="#iOS客户端布局浅谈" class="headerlink" title="iOS客户端布局浅谈"></a>iOS客户端布局浅谈</h2><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>日常开发中，UI搭建、调试会占用我们大部分的时间，以至于移动端开发经常会被调侃为搭界面的。提高UI布局技术可以提高开发效率，把更多的时间放在优化、逻辑方面，而不是被界面业务绑死。</p>
<h3 id="二、UI布局约束概览"><a href="#二、UI布局约束概览" class="headerlink" title="二、UI布局约束概览"></a>二、UI布局约束概览</h3><ul>
<li>nib：nib是NeXT interface builder的英文缩写，以二进制的形式存储界面信息，是IB3.0以前的文件格式。</li>
<li>xib：xib是xml interface builder的英文缩写，是IB3.0之后苹果公司推出的新一代，以xml格式存储界面信息，在最终执行前，xib文件会被编译为nib文件。</li>
<li>storyboard：是苹果最新推出的用于在界面开发中替代xib文件的一种新技术。本质上是一个xml文件的集中管理区，不但可以描述xib单个界面的结构，还可以描述界面之间的跳转及依赖关系。主要是靠手拖，感觉像积木玩具。</li>
<li>frame：等效于代码版的storyboard，但更灵活。目前比较常用。多众多机型尺寸还是有点棘手。计算比较头疼。（据统计性能最好的布局方式！！！）</li>
<li>AutoLayout：自动布局（AutoLayout）是iOS6发布的界面布局技术，该算法的主要思想是：将基于约束系统的布局规则（本质上是表示视图布局关系的线性方程组）转化为表示规则的视图几何参数。实际上AutoLayout算法本身并非有苹果发明，只是苹果用Objective-C去实现了该算法，方便iOS开发者使用。AutoLayout有多种使用方式，如①可视化工具：Xcode的Interface Builder，②纯代码：以<a href="https://github.com/SnapKit/Masonry">Masonry</a>为代表。更多内容见自动布局 <a href="https://www.jianshu.com/p/3a872a0bfe11">Auto Layout (原理篇)</a>。</li>
<li>FlexBox：弹性布局（Flexible Box）。对，就是目前Web端最流行的布局方式（以前是盒子模型），现在APP上也能使用。此方案就扩展出很多技术，如<a href="https://github.com/facebook/yoga">Yoga</a>（最牛逼的代表，Facebook出品，衍生出很多上层方案，如跨平台的<a href="https://github.com/facebook/react-native">ReactNative</a>、Android的<a href="https://tech.meituan.com/2019/03/14/litho-use-and-principle-analysis.html">Litho</a>、iOS的Yogakit）、<a href="https://github.com/google/flexbox-layout">FlexboxLayout</a>（Android代表，Google出品）、<a href="https://github.com/zhenglibao/FlexLib">FlexLib</a>、<a href="https://github.com/FLEXTool/FLEX">FLEX</a>等。</li>
<li>swiftUI：<a href="https://developer.apple.com/xcode/swiftui/">官网</a>，苹果官方推荐。更多内容见苹果发布全新 <a href="(https://www.infoq.cn/article/Puii*HdQWCDjPzvTNcKq)">SwiftUI 框架：一次编码，五端通用</a>。<br>三、性能概览<br><a href="https://imgchr.com/i/rlDxNd"><img src="https://s3.ax1x.com/2020/12/16/rlDxNd.png" alt="iOS布局耗时测试.png"></a><br>四、Masonry<br><a href="https://imgchr.com/i/rlrgPA"><img src="https://s3.ax1x.com/2020/12/16/rlrgPA.png" alt="rlrgPA.png"></a><br><a href="https://imgchr.com/i/rlrxqU"><img src="https://s3.ax1x.com/2020/12/16/rlrxqU.png" alt="rlrxqU.png"></a></li>
</ul>
<p>1、使用前：AutoLayout关于更新的几个方法的区别</p>
<ul>
<li>setNeedsLayout：告知页面需要更新，但是不会立刻开始更新。执行后会立刻调用layoutSubviews。</li>
<li>layoutIfNeeded：告知页面布局立刻更新。所以一般都会和setNeedsLayout一起使用。如果希望立刻生成新的frame需要调用此方法，利用这点一般布局动画可以在更新布局后直接使用这个方法让动画生效。</li>
<li>layoutSubviews：系统重写布局。</li>
<li>setNeedsUpdateConstraints：告知需要更新约束，但是不会立刻开始。</li>
<li>updateConstraintsIfNeeded：告知立刻更新约束。</li>
<li>updateConstraints：系统更新约束（推荐将更新约束写在这里）。<br>2、基本使用</li>
<li>mas_makeConstraints:添加约束。</li>
<li>mas_updateConstraints：更新约束、亦可添加新约束。</li>
<li>mas_remakeConstraints：重置之前的约束。<br>3、常用宏定义<br>Masonry使用链式方式编程，有定义一些宏来方便开发，如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define offset(...)                      mas_offset(__VA_ARGS__)#define equalTo(...)                     mas_equalTo(__VA_ARGS__)#define greaterThanOrEqualTo(...)        mas_greaterThanOrEqualTo(__VA_ARGS__)#define lessThanOrEqualTo(...)           mas_lessThanOrEqualTo(__VA_ARGS__)</span><br></pre></td></tr></table></figure>
<p>如：<br>// make.left 以下两种写法等价</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make.left.equalTo(superView.mas_left).offset(10);</span><br><span class="line">make.left.mas_equalTo(10);</span><br><span class="line">make.left.mas_equalTo(superView.mas_left).mas_offset(10);</span><br></pre></td></tr></table></figure>
<p>4、约束属性的关系<br>约束属性有三种关系，分别是等于，大于，小于。</p>
<ul>
<li><p>等于（equivalent to NSLayoutRelationEqual）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;.equalTo</span><br><span class="line">&#x2F;&#x2F; view.width &#x3D; 60</span><br><span class="line">make.width.mas_equalTo(60);</span><br></pre></td></tr></table></figure>
</li>
<li><p>小于（equivalent to NSLayoutRelationLessThanOrEqual）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;.lessThanOrEqualTo</span><br><span class="line">&#x2F;&#x2F; view.width &lt;&#x3D; 120</span><br><span class="line">make.width.lessThanOrEqualTo(120);</span><br></pre></td></tr></table></figure>
</li>
<li><p>大于（equivalent to NSLayoutRelationGreaterThanOrEqual）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;.greaterThanOrEqualTo </span><br><span class="line">&#x2F;&#x2F; view.width &gt;&#x3D; 60</span><br><span class="line">make.width.lessThanOrEqualTo(60);</span><br></pre></td></tr></table></figure>
<p>5、常见写法<br>对于自动布局我们只需要设置好view的position，包括X轴和Y轴上的位置，以及view的长宽即可。<br>Masonry除了设置单个约束以外，还提供了很多方便的复合约束设置方式。以下分别介绍单个约束属性设置方式和复合约束设置方式。<br>6、长度和宽度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; make width &#x3D; 60</span><br><span class="line">make.width.mas_equalTo(60);</span><br><span class="line">&#x2F;&#x2F; make height &#x3D; 60</span><br><span class="line">make.height.mas_equalTo(60);</span><br><span class="line">&#x2F;&#x2F; make height &#x3D; 60, width &#x3D; 60</span><br><span class="line">make.size.equalTo(CGSizeMake(60, 60));</span><br><span class="line">&#x2F;&#x2F; make view1.height &#x3D; view2.height view1.width &#x3D; view2.width</span><br><span class="line">make.size.mas_equalTo(view2);</span><br><span class="line">&#x2F;&#x2F; make width and height greater than or equal to view2</span><br><span class="line">make.size.greaterThanOrEqualTo(view2);</span><br><span class="line">&#x2F;&#x2F; make width &#x3D; superview.width + 100, height &#x3D; superview.height - 50</span><br><span class="line">make.size.equalTo(superview).sizeOffset(CGSizeMake(100, -50));</span><br></pre></td></tr></table></figure>
<p>7、边距对齐（位置设置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make.left.mas_equalTo(superView.mas_left).mas_offset(10);</span><br><span class="line">make.left.mas_greaterThanOrEqualTo(10);</span><br></pre></td></tr></table></figure>
<p>约束的链式写法中，不包含其他相对的view时，默认为其superview view.left 等于 label.lefet，以下三种写法等价：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make.left.mas_equalTo(view.superview.mas_left).offset(10);</span><br><span class="line">make.left.mas_equalTo(view.superview).offset(10);</span><br></pre></td></tr></table></figure>
<p>view.left 大于等于 label.left，以下两种写法等同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make.left.greaterThanOrEqualTo(label);</span><br><span class="line">make.left.greaterThanOrEqualTo(label.mas_left);</span><br></pre></td></tr></table></figure>
<p>上下左右四个边缘等于父视图的边缘，也就是top, left, bottom, right equal view2，以下三种写法等同（复合约束写法）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make.edges.equalTo(superview);</span><br><span class="line">make.edges.equalTo(superview).insets(UIEdgeInsetsMake(0, 0, 0, 0))</span><br><span class="line">make.left.right.and.bottom.equalTo(superview);</span><br></pre></td></tr></table></figure>
<p>PS：如果top, left, bottom, right的边距各自不同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; make top &#x3D; superview.top + 5, left &#x3D; superview.left + 10,</span><br><span class="line">&#x2F;&#x2F; bottom &#x3D; superview.bottom - 15, right &#x3D; superview.right - 20</span><br><span class="line">make.edges.equalTo(superview).insets(UIEdgeInsetsMake(5, 10, 15, 20))</span><br></pre></td></tr></table></figure>
<p>8、中心对齐（位置设置）<br>X轴上中心和superview的X轴上中心对齐。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make.centerX.equalTo(superview.mas_centerX).offet(0)</span><br><span class="line">make.centerX.equalTo(superview.mas_centerX) </span><br><span class="line">make.centerX.equalTo(superview)</span><br></pre></td></tr></table></figure>
<p>X轴和Y轴中心对齐</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make.center.equalTo(superview);</span><br><span class="line">make.center.equalTo(superview).centerOffset(CGPointMake(0, 0));</span><br></pre></td></tr></table></figure>
<p>PS：如果X轴和Y轴上的中心对齐各自不同：</p>
<figure class="highlight plain"><figcaption><span>make centerX </span></figcaption><table><tr><td class="code"><pre><span class="line">make.center.equalTo(superview).centerOffset(CGPointMake(-5, 10));</span><br></pre></td></tr></table></figure>
<p>9、约束数字值<br>Masonry允许将宽度和高度设置为常量值。如果要将视图设置一个最小和最大宽度时，可以在block中同时设定：<br>//width &gt;= 200 &amp;&amp; width &lt;= 400</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make.width.greaterThanOrEqualTo(@200);</span><br><span class="line">make.width.lessThanOrEqualTo(@400);</span><br></pre></td></tr></table></figure>
<p>Masonry不允许把边距属性（left，top，right，bottom，centerX，centerY）的约束设置为常量值，如果设置了，会默认这些属性是相对父视图设置的。</p>
<figure class="highlight plain"><figcaption><span>view.left </span></figcaption><table><tr><td class="code"><pre><span class="line">make.left.equalTo(@10)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;creates view.left &#x3D; view.superview.left + 10</span><br><span class="line">make.left.lessThanOrEqualTo(@10)</span><br></pre></td></tr></table></figure>
<p>// 或者使用mas_equalTo这种时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make.top.mas_equalTo(42);</span><br><span class="line">make.height.mas_equalTo(20);</span><br><span class="line">make.size.mas_equalTo(CGSizeMake(50, 100));</span><br><span class="line">make.edges.mas_equalTo(UIEdgeInsetsMake(10, 0, 10, 0));</span><br><span class="line">make.left.mas_equalTo(view).mas_offset(UIEdgeInsetsMake(10, 0, 10, 0));</span><br></pre></td></tr></table></figure>
<p>10、优先级<br>自定义优先级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .priority allows you to specify an exact priority  </span><br><span class="line">make.top.equalTo(label.mas_left).with.priority(600);</span><br></pre></td></tr></table></figure>
<p>高优先级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .priorityHigh equivalent to **UILayoutPriorityDefaultHigh**  </span><br><span class="line">make.left.equalTo(label.mas_left).with.priorityHigh();</span><br></pre></td></tr></table></figure>
<p>中等优先级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .priorityMedium is half way between high and low  </span><br><span class="line">make.left.equalTo(label.mas_left).with.priorityMedium();</span><br></pre></td></tr></table></figure>
<p>低优先级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .priorityLow equivalent to **UILayoutPriorityDefaultLow**</span><br><span class="line">make.left.greaterThanOrEqualTo(label.mas_left).with.priorityLow();</span><br></pre></td></tr></table></figure>
<p>11、equalTo 和 mas_equalTo的区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define mas_equalTo(...) equalTo(MASBoxValue((__VA_ARGS__)))</span><br><span class="line">#define mas_greaterThanOrEqualTo(...) greaterThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span><br><span class="line">#define mas_lessThanOrEqualTo(...) lessThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span><br><span class="line">#define mas_offset(...) valueOffset(MASBoxValue((__VA_ARGS__)))</span><br></pre></td></tr></table></figure>
<p>得出结论：mas_equalTo只是对其参数进行了一个BOX(装箱) 操作，目前支持的类型：数值类型（NSNumber）、 点（CGPoint）、大小（CGSize）、边距（UIEdgeInsets），而equalTo：这个方法不会对参数进行包装。<br>12、多个视图（大于2）有相同规则的布局方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** NSArray+MASAdditions.h</span><br><span class="line"></span><br><span class="line"> *  多个控件固定间隔的等间隔排列，变化的是控件的长度或者宽度值</span><br><span class="line"> *</span><br><span class="line"> *  @param axisType        轴线方向</span><br><span class="line"> *  @param fixedSpacing    间隔大小</span><br><span class="line"> *  @param leadSpacing     头部间隔</span><br><span class="line"> *  @param tailSpacing     尾部间隔</span><br><span class="line"> *&#x2F;- (void)mas_distributeViewsAlongAxis:(MASAxisType)axisType </span><br><span class="line">                    withFixedSpacing:(CGFloat)fixedSpacing l</span><br><span class="line">                          eadSpacing:(CGFloat)leadSpacing </span><br><span class="line">                         tailSpacing:(CGFloat)tailSpacing;</span><br><span class="line">&#x2F;**</span><br><span class="line"> *  多个固定大小的控件的等间隔排列,变化的是间隔的空隙</span><br><span class="line"> *</span><br><span class="line"> *  @param axisType        轴线方向</span><br><span class="line"> *  @param fixedItemLength 每个控件的固定长度或者宽度值</span><br><span class="line"> *  @param leadSpacing     头部间隔</span><br><span class="line"> *  @param tailSpacing     尾部间隔</span><br><span class="line"> *&#x2F;- (void)mas_distributeViewsAlongAxis:(MASAxisType)axisType </span><br><span class="line">                 withFixedItemLength:(CGFloat)fixedItemLength </span><br><span class="line">                         leadSpacing:(CGFloat)leadSpacing </span><br><span class="line">                         tailSpacing:(CGFloat)tailSpacing;</span><br></pre></td></tr></table></figure>
<p>eg1：水平方向排列、固定控件间隔、控件长度不定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)test_masonry_horizontal_fixSpace &#123;</span><br><span class="line">    &#x2F;&#x2F; 实现masonry水平固定间隔方法</span><br><span class="line">    [self.masonryViewArray mas_distributeViewsAlongAxis:MASAxisTypeHorizontal withFixedSpacing:30 leadSpacing:10 tailSpacing:10];   </span><br><span class="line">    &#x2F;&#x2F; 设置array的垂直方向的约束</span><br><span class="line">    [self.masonryViewArray mas_makeConstraints:^(MASConstraintMaker *make) &#123;   </span><br><span class="line">        make.top.equalTo(150);</span><br><span class="line">        make.height.equalTo(80);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rlWKn1"><img src="https://s3.ax1x.com/2020/12/16/rlWKn1.png" alt="rlWKn1.png"></a></p>
</li>
</ul>
<p>eg2：水平方向排列、固定控件长度、控件间隔不定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)test_masonry_horizontal_fixItemWidth &#123;</span><br><span class="line">    &#x2F;&#x2F; 实现masonry水平固定控件宽度方法</span><br><span class="line">    [self.masonryViewArray mas_distributeViewsAlongAxis:MASAxisTypeHorizontal withFixedItemLength:80 leadSpacing:10 tailSpacing:10];  </span><br><span class="line"> &#x2F;&#x2F; 设置array的垂直方向的约束</span><br><span class="line">[self.maViewArray mas_makeConstraints:^(MASConstraintMaker *make) &#123;      </span><br><span class="line">        make.top.equalTo(150);</span><br><span class="line">        make.height.equalTo(80);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rlWY1H"><img src="https://s3.ax1x.com/2020/12/16/rlWY1H.png" alt="rlWY1H.png"></a><br>eg3：垂直方向排列、固定控件间隔、控件高度不定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)test_masonry_vertical_fixSpace &#123;</span><br><span class="line">    &#x2F;&#x2F; 实现masonry垂直固定控件高度方法</span><br><span class="line">    [self.masonryViewArray mas_distributeViewsAlongAxis:MASAxisTypeVertical withFixedSpacing:30 leadSpacing:10 tailSpacing:10];</span><br><span class="line">&#x2F;&#x2F; 设置array的水平方向的约束</span><br><span class="line">[self.masonryViewArray mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make.left.equalTo(150);</span><br><span class="line">        make.width.equalTo(80);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rlWanI"><img src="https://s3.ax1x.com/2020/12/16/rlWanI.png" alt="rlWanI.png"></a><br>eg4：垂直方向排列、固定控件高度、控件间隔不定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)test_masonry_vertical_fixItemWidth &#123;</span><br><span class="line">    &#x2F;&#x2F; 实现masonry垂直方向固定控件高度方法</span><br><span class="line">    [self.masonryViewArray mas_distributeViewsAlongAxis:MASAxisTypeVertical withFixedItemLength:80 leadSpacing:10 tailSpacing:10];</span><br><span class="line">    &#x2F;&#x2F; 设置array的水平方向的约束</span><br><span class="line">    [self.masonryViewArray mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make.left.equalTo(150);</span><br><span class="line">        make.width.equalTo(80);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/rlWBAf"><img src="https://s3.ax1x.com/2020/12/16/rlWBAf.png" alt="rlWBAf.png"></a><br>13、Content Compression Resistance和Content Hugging<br><a href="https://imgchr.com/i/rlWccj"><img src="https://s3.ax1x.com/2020/12/16/rlWccj.png" alt="rlWccj.png"></a><br>// label1: 位于左上角</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[_label1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.top.equalTo(_contentView1.mas_top).with.offset(5);</span><br><span class="line">    make.left.equalTo(_contentView1.mas_left).with.offset(2);</span><br><span class="line">    make.height.equalTo(@40);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>// label2: 位于右上角</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[_label2 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    &#x2F;&#x2F;左边贴着label1，间隔2</span><br><span class="line">    make.left.equalTo(_label1.mas_right).with.offset(2);</span><br><span class="line">    &#x2F;&#x2F;上边贴着父view，间隔5</span><br><span class="line">    make.top.equalTo(_contentView1.mas_top).with.offset(5);</span><br><span class="line">    &#x2F;&#x2F;右边的间隔保持大于等于2，注意是lessThanOrEqual</span><br><span class="line">    &#x2F;&#x2F;这里的“lessThanOrEqualTo”放在从左往右的X轴上考虑会更好理解。</span><br><span class="line">    &#x2F;&#x2F;即：label2的右边界的X坐标值“小于等于”containView的右边界的X坐标值。</span><br><span class="line">    make.right.lessThanOrEqualTo(_contentView1.mas_right).with.offset(-2);</span><br><span class="line">    make.height.equalTo(@40);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>//设置label1的content hugging 为1000</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[_label1 setContentHuggingPriority:UILayoutPriorityRequired</span><br><span class="line">                           forAxis:UILayoutConstraintAxisHorizontal];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置label1的content compression 为1000</span><br><span class="line">[_label1 setContentCompressionResistancePriority:UILayoutPriorityRequired                                       forAxis:UILayoutConstraintAxisHorizontal];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置右边的label2的content hugging 为1000</span><br><span class="line">[_label2 setContentHuggingPriority:UILayoutPriorityRequired</span><br><span class="line">                           forAxis:UILayoutConstraintAxisHorizontal];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置右边的label2的content compression 为250</span><br><span class="line">[_label2 setContentCompressionResistancePriority:UILayoutPriorityDefaultLow                                         forAxis:UILayoutConstraintAxisHorizontal];</span><br></pre></td></tr></table></figure>
<p>五、UIStackVIew</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, UILayoutConstraintAxis) &#123;</span><br><span class="line">UILayoutConstraintAxisHorizontal &#x3D; 0,&#x2F;&#x2F;水平</span><br><span class="line">UILayoutConstraintAxisVertical &#x3D; 1&#x2F;&#x2F;垂直</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, UIStackViewAlignment) &#123;</span><br><span class="line">UIStackViewAlignmentFill,&#x2F;&#x2F;子视图填充StackView</span><br><span class="line">UIStackViewAlignmentLeading,&#x2F;&#x2F;子视图左对齐（axis为垂直方向而言）</span><br><span class="line">UIStackViewAlignmentTop &#x3D; UIStackViewAlignmentLeading,&#x2F;&#x2F;子视图顶部对齐（axis为水平方向而言）</span><br><span class="line">UIStackViewAlignmentFirstBaseline, &#x2F;&#x2F; 按照第一个子视图的文字的第一行对齐，同时保证高度最大的子视图底部对齐（只在axis为水平方向有效）</span><br><span class="line">UIStackViewAlignmentCenter,&#x2F;&#x2F;子视图居中对齐</span><br><span class="line">UIStackViewAlignmentTrailing,&#x2F;&#x2F;子视图右对齐(axis为垂直方向而言）</span><br><span class="line">UIStackViewAlignmentBottom &#x3D; UIStackViewAlignmentTrailing,&#x2F;&#x2F;子视图底部对齐（axis为水平方向而言）</span><br><span class="line">UIStackViewAlignmentLastBaseline, &#x2F;&#x2F; 按照最后一个子视图的文字的最后一行对齐，同时保证高度最大的子视图顶部对齐（只在axis为水平方向有效）</span><br><span class="line">&#125; NS_ENUM_AVAILABLE_IOS(9_0);</span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, UIStackViewDistribution) &#123;</span><br><span class="line">UIStackViewDistributionFill &#x3D; 0, </span><br><span class="line">UIStackViewDistributionFillEqually, </span><br><span class="line">UIStackViewDistributionFillProportionally,</span><br><span class="line">UIStackViewDistributionEqualSpacing, </span><br><span class="line">UIStackViewDistributionEqualCentering,&#125; NS_ENUM_AVAILABLE_IOS(9_0);</span><br></pre></td></tr></table></figure>
<h4 id="Written-By-多点-移动运营研发部-贺波"><a href="#Written-By-多点-移动运营研发部-贺波" class="headerlink" title="Written By 多点-移动运营研发部-贺波"></a>Written By 多点-移动运营研发部-贺波</h4>]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>布局漫谈</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS动画小结</title>
    <url>/2020/12/17/iOS%E5%8A%A8%E7%94%BB%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h1 id="iOS动画小结"><a href="#iOS动画小结" class="headerlink" title="iOS动画小结"></a>iOS动画小结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="UIView，CALayer的关系及区别"><a href="#UIView，CALayer的关系及区别" class="headerlink" title="UIView，CALayer的关系及区别"></a>UIView，CALayer的关系及区别</h3><p>框架及继承</p>
<ul>
<li>CALayer 基于 QuartzCore 框架<br>   QuartzCore中常见的如：CAAnimation(核心动画架构)、CAEmitterLayer(粒子动画Emitter发射器)、      CAEmitterCell(粒子动画)、CATransform3D、CALayer等</li>
<li>UIView 基于 UIKit 框架</li>
<li>UIView是直接继承自UIResponder的</li>
<li>CALayer是直接继承自NSObject<br>结构及功能</li>
<li>view负责了用户的交互以及对layer的管理，layer则负责了所有能让用户看到的东西。</li>
<li>每个 UIView 内部都有一个 CALayer 在背后提供内容的绘制和显示，并且 UIView 的尺寸样式都由内部的 Layer 所提供。两者都有树状层级结构，layer 内部有SubLayers，View 内部有SubViews.但是 Layer 比 View 多了个anchorPoint。<a href="https://www.cnblogs.com/jgl-blog/p/5735307.html">position与anchorPoint</a></li>
<li>在 View显示的时候，UIView做为Layer的CALayerDelegate,View 的显示内容取决于内部的 CALayer 的 display。</li>
<li>layer 内部维护着三个layer tree,分为 model layer tree(模型图层树) 、presentation layer tree（表示图层树） 、render layer tree（渲染图层树）,在做 iOS动画的时候，我们修改动画的属性，在动画的其实是 Layer 的 presentationLayer的属性值,而最终展示在界面上的其实是提供 View的modelLayer。<br>这三种图层树有什么作用呢？说到有啥作用，就不得不提Core Animation 核心动画了。因为这三个图层在核心动画中才能显示出它们的特点和用处。下面是官方文档的说明：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">模型图层树 中的对象是应用程序与之交互的对象。此树中的对象是存储任何动画的目标值的模型对象。每当更改图层的属性时，都使用其中一个对象。</span><br><span class="line">表示图层树 中的对象包含任何正在运行的动画的飞行中值。层树对象包含动画的目标值，而表示树中的对象反映屏幕上显示的当前值。您永远不应该修改此树中的对象。相反，您可以使用这些对象来读取当前动画值，也许是为了从这些值开始创建新动画。</span><br><span class="line">渲染图层树 中的对象执行实际动画，并且是Core Animation的私有动画。</span><br></pre></td></tr></table></figure>
<a href="https://imgchr.com/i/r8sob6"><img src="https://s3.ax1x.com/2020/12/17/r8sob6.png" alt="r8sob6.png"></a><br>详细内容参考文章：<a href="https://www.jianshu.com/p/d09e7929f269">iOS 详解 CALayer 中的”模型层”和”展示层”</a></li>
</ul>
<h2 id="动画详细介绍"><a href="#动画详细介绍" class="headerlink" title="动画详细介绍"></a>动画详细介绍</h2><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>iOS动画主要是指Core Animation框架。官方使用文档地址为：Core Animation Guide。<br>Core Animation是iOS和macOS平台上负责图形渲染与动画的基础框架。Core Animation可以作用与动画视图或者其他可视元素，为你完成了动画所需的大部分绘帧工作。你只需要配置少量的动画参数（如开始点的位置和结束点的位置）即可使用Core Animation的动画效果。Core Animation将大部分实际的绘图任务交给了图形硬件来处理，图形硬件会加速图形渲染的速度。这种自动化的图形加速技术让动画拥有更高的帧率并且显示效果更加平滑，不会加重CPU的负担而影响程序的运行速度。<br>总的来说，从涉及类的形式来看，iOS动画有：基于UIView的仿射形变动画，基于CAAnimation及其子类的动画，基于CG的动画，暂时先总结前两种动画。</p>
<h4 id="二、动画类型介绍"><a href="#二、动画类型介绍" class="headerlink" title="二、动画类型介绍"></a>二、动画类型介绍</h4><h5 id="1、UIView动画"><a href="#1、UIView动画" class="headerlink" title="1、UIView动画"></a>1、UIView动画</h5><p>UIView动画实质上是对Core Animation的封装，提供简洁的动画接口。<br>UIView动画可以设置的动画属性有:</p>
<ul>
<li>大小变化(frame)</li>
<li>拉伸变化(bounds)</li>
<li>中心位置(center)</li>
<li>旋转(transform)</li>
<li>透明度(alpha)</li>
<li>背景颜色(backgroundColor)</li>
<li>拉伸内容(contentStretch)</li>
</ul>
<p>UIview 类方法动画 （iOS13.0后废弃，需要用block动画代替）</p>
<h6 id="1）动画的开始和结束方法"><a href="#1）动画的开始和结束方法" class="headerlink" title="1）动画的开始和结束方法"></a>1）动画的开始和结束方法</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[UIView beginAnimations:(nullable NSString *) context:(nullable void *)];</span><br></pre></td></tr></table></figure>
<p>第一个参数：动画标识<br>第二个参数：附加参数，在设置了代理的情况下，此参数将发送到setAnimationWillStartSelector和setAnimationDidStopSelector所指定的方法。大部分情况下，我们设置为nil即可。<br>1.2 结束动画标记</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[UIView commitAnimations];</span><br></pre></td></tr></table></figure>
<h6 id="2）动画参数的设置方法"><a href="#2）动画参数的设置方法" class="headerlink" title="2）动画参数的设置方法"></a>2）动画参数的设置方法</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;动画持续时间</span><br><span class="line">[UIView setAnimationDuration:(NSTimeInterval)];</span><br><span class="line">&#x2F;&#x2F;动画的代理对象</span><br><span class="line">[UIView setAnimationDelegate:(nullable id)];</span><br><span class="line">&#x2F;&#x2F;设置动画将开始时代理对象执行的SEL</span><br><span class="line">[UIView setAnimationWillStartSelector:(nullable SEL)];</span><br><span class="line">&#x2F;&#x2F;设置动画结束时代理对象执行的SEL</span><br><span class="line">[UIView setAnimationDidStopSelector:(nullable SEL)];</span><br><span class="line">&#x2F;&#x2F;设置动画延迟执行的时间</span><br><span class="line">[UIView setAnimationDelay:(NSTimeInterval)];</span><br><span class="line">&#x2F;&#x2F;设置动画的重复次数</span><br><span class="line">[UIView setAnimationRepeatCount:(float)];</span><br><span class="line">&#x2F;&#x2F;设置动画的曲线</span><br><span class="line">[UIView setAnimationCurve:(UIViewAnimationCurve)];</span><br><span class="line">UIViewAnimationCurve的枚举值如下：</span><br><span class="line">UIViewAnimationCurveEaseInOut,         &#x2F;&#x2F; 慢进慢出（默认值）</span><br><span class="line">UIViewAnimationCurveEaseIn,            &#x2F;&#x2F; 慢进</span><br><span class="line">UIViewAnimationCurveEaseOut,           &#x2F;&#x2F; 慢出</span><br><span class="line">UIViewAnimationCurveLinear             &#x2F;&#x2F; 匀速</span><br><span class="line">&#x2F;&#x2F;设置是否从当前状态开始播放动画</span><br><span class="line">[UIView setAnimationBeginsFromCurrentState:YES];</span><br><span class="line">假设上一个动画正在播放，且尚未播放完毕，我们将要进行一个新的动画：</span><br><span class="line">当为YES时：动画将从上一个动画所在的状态开始播放</span><br><span class="line">当为NO时：动画将从上一个动画所指定的最终状态开始播放（此时上一个动画马上结束）</span><br><span class="line">&#x2F;&#x2F;设置动画是否继续执行相反的动画</span><br><span class="line">[UIView setAnimationRepeatAutoreverses:(BOOL)];</span><br><span class="line">&#x2F;&#x2F;是否禁用动画效果（对象属性依然会被改变，只是没有动画效果）</span><br><span class="line">[UIView setAnimationsEnabled:(BOOL)];</span><br><span class="line">&#x2F;&#x2F;设置视图的过渡效果</span><br><span class="line">[UIView setAnimationTransition:(UIViewAnimationTransition) forView:(nonnull      UIView *) cache:(BOOL)];</span><br><span class="line"> 第一个参数：UIViewAnimationTransition的枚举值如下</span><br><span class="line">     UIViewAnimationTransitionNone,              &#x2F;&#x2F;不使用动画</span><br><span class="line">     UIViewAnimationTransitionFlipFromLeft,      &#x2F;&#x2F;从左向右旋转翻页</span><br><span class="line">     UIViewAnimationTransitionFlipFromRight,     &#x2F;&#x2F;从右向左旋转翻页</span><br><span class="line">     UIViewAnimationTransitionCurlUp,            &#x2F;&#x2F;从下往上卷曲翻页</span><br><span class="line">     UIViewAnimationTransitionCurlDown,          &#x2F;&#x2F;从上往下卷曲翻页</span><br><span class="line"> 第二个参数：需要过渡效果的View</span><br><span class="line"> 第三个参数：是否使用视图缓存，YES：视图在开始和结束时渲染一次；NO：视图在每一帧都渲染</span><br></pre></td></tr></table></figure>
<h5 id="2、UIview-Block动画"><a href="#2、UIview-Block动画" class="headerlink" title="2、UIview Block动画"></a>2、UIview Block动画</h5><p>iOS4.0以后，增加了Block动画块，提供更简洁的方式来实现动画。<br>Block动画方法</p>
<h5 id="1）Block动画方法"><a href="#1）Block动画方法" class="headerlink" title="1）Block动画方法"></a>1）Block动画方法</h5><h6 id="1、最简洁的Block动画：包含时间和动"><a href="#1、最简洁的Block动画：包含时间和动" class="headerlink" title="1、最简洁的Block动画：包含时间和动"></a>1、最简洁的Block动画：包含时间和动</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[UIView animateWithDuration:(NSTimeInterval)  &#x2F;&#x2F;动画持续时间</span><br><span class="line">                 animations:^&#123;</span><br><span class="line">                 &#x2F;&#x2F;执行的动画</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h6 id="2、带有动画完成回调的Block动画"><a href="#2、带有动画完成回调的Block动画" class="headerlink" title="2、带有动画完成回调的Block动画"></a>2、带有动画完成回调的Block动画</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[UIView animateWithDuration:(NSTimeInterval)  &#x2F;&#x2F;动画持续时间</span><br><span class="line">                 animations:^&#123;</span><br><span class="line">               &#x2F;&#x2F;执行的动画</span><br><span class="line">&#125;                completion:^(BOOL finished) &#123;</span><br><span class="line">               &#x2F;&#x2F;动画执行完毕后的操作</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h6 id="3、可设置延迟时间和过渡效果的Block动画"><a href="#3、可设置延迟时间和过渡效果的Block动画" class="headerlink" title="3、可设置延迟时间和过渡效果的Block动画"></a>3、可设置延迟时间和过渡效果的Block动画</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[UIView animateWithDuration:(NSTimeInterval) &#x2F;&#x2F;动画持续时间</span><br><span class="line">                      delay:(NSTimeInterval) &#x2F;&#x2F;动画延迟执行的时间</span><br><span class="line">                    options:(UIViewAnimationOptions) &#x2F;&#x2F;动画的过渡效果</span><br><span class="line">                 animations:^&#123;</span><br><span class="line">                  &#x2F;&#x2F;执行的动画</span><br><span class="line">&#125;                completion:^(BOOL finished) &#123;</span><br><span class="line">                  &#x2F;&#x2F;动画执行完毕后的操作</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>UIViewAnimationOptions的枚举值如下，可组合使用：</p>
<figure class="highlight plain"><figcaption><span> </span><a href="//进行动画时布局子控件">link</a></figcaption><table><tr><td class="code"><pre><span class="line">UIViewAnimationOptionAllowUserInteraction      &#x2F;&#x2F;进行动画时允许用户交互</span><br><span class="line">UIViewAnimationOptionBeginFromCurrentState     &#x2F;&#x2F;从当前状态开始动画</span><br><span class="line">UIViewAnimationOptionRepeat                    &#x2F;&#x2F;无限重复执行动画</span><br><span class="line">UIViewAnimationOptionAutoreverse               &#x2F;&#x2F;执行动画回路</span><br><span class="line">UIViewAnimationOptionOverrideInheritedDuration &#x2F;&#x2F;忽略嵌套动画的执行时间设置</span><br><span class="line">UIViewAnimationOptionOverrideInheritedCurve    &#x2F;&#x2F;忽略嵌套动画的曲线设置</span><br><span class="line">UIViewAnimationOptionAllowAnimatedContent      &#x2F;&#x2F;转场：进行动画时重绘视图</span><br><span class="line">UIViewAnimationOptionShowHideTransitionViews   &#x2F;&#x2F;转场：移除（添加和移除图层的）动画效果</span><br><span class="line">UIViewAnimationOptionOverrideInheritedOptions  &#x2F;&#x2F;不继承父动画设置</span><br><span class="line"></span><br><span class="line">UIViewAnimationOptionCurveEaseInOut            &#x2F;&#x2F;时间曲线，慢进慢出（默认值）</span><br><span class="line">UIViewAnimationOptionCurveEaseIn               &#x2F;&#x2F;时间曲线，慢进</span><br><span class="line">UIViewAnimationOptionCurveEaseOut              &#x2F;&#x2F;时间曲线，慢出</span><br><span class="line">UIViewAnimationOptionCurveLinear               &#x2F;&#x2F;时间曲线，匀速</span><br><span class="line"></span><br><span class="line">UIViewAnimationOptionTransitionNone            &#x2F;&#x2F;转场，不使用动画</span><br><span class="line">UIViewAnimationOptionTransitionFlipFromLeft    &#x2F;&#x2F;转场，从左向右旋转翻页</span><br><span class="line">UIViewAnimationOptionTransitionFlipFromRight   &#x2F;&#x2F;转场，从右向左旋转翻页</span><br><span class="line">UIViewAnimationOptionTransitionCurlUp          &#x2F;&#x2F;转场，下往上卷曲翻页</span><br><span class="line">UIViewAnimationOptionTransitionCurlDown        &#x2F;&#x2F;转场，从上往下卷曲翻页</span><br><span class="line">UIViewAnimationOptionTransitionCrossDissolve   &#x2F;&#x2F;转场，交叉消失和出现</span><br><span class="line">UIViewAnimationOptionTransitionFlipFromTop     &#x2F;&#x2F;转场，从上向下旋转翻页</span><br><span class="line">UIViewAnimationOptionTransitionFlipFromBottom  &#x2F;&#x2F;转场，从下向上旋转翻页</span><br></pre></td></tr></table></figure>
<h6 id="4、Spring动画"><a href="#4、Spring动画" class="headerlink" title="4、Spring动画"></a>4、Spring动画</h6><p>iOS7.0后新增Spring动画（iOS系统动画大部分采用Spring Animation，适用于所有可被添加动画效果的属性）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[UIView animateWithDuration:(NSTimeInterval)&#x2F;&#x2F;动画持续时间</span><br><span class="line">                      delay:(NSTimeInterval)&#x2F;&#x2F;动画延迟执行的时间</span><br><span class="line">     usingSpringWithDamping:(CGFloat)&#x2F;&#x2F;震动效果，范围0~1，数值越小震动效果越明显</span><br><span class="line">      initialSpringVelocity:(CGFloat)&#x2F;&#x2F;初始速度，数值越大初始速度越快</span><br><span class="line">                    options:(UIViewAnimationOptions)&#x2F;&#x2F;动画的过渡效果</span><br><span class="line">                 animations:^&#123;</span><br><span class="line">                    &#x2F;&#x2F;执行的动画</span><br><span class="line">&#125;</span><br><span class="line">                 completion:^(BOOL finished) &#123;</span><br><span class="line">                    &#x2F;&#x2F;动画执行完毕后的操作</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>5、Keyframes动画</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[UIView animateKeyframesWithDuration:(NSTimeInterval)&#x2F;&#x2F;动画持续时间</span><br><span class="line">                               delay:(NSTimeInterval)&#x2F;&#x2F;动画延迟执行的时间</span><br><span class="line">                             options:(UIViewKeyframeAnimationOptions)&#x2F;&#x2F;动画的过渡效果</span><br><span class="line">                          animations:^&#123;</span><br><span class="line">                        &#x2F;&#x2F;执行的关键帧动画</span><br><span class="line">&#125;</span><br><span class="line">                          completion:^(BOOL finished) &#123;</span><br><span class="line">                        &#x2F;&#x2F;动画执行完毕后的操作</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>UIViewKeyframeAnimationOptions的枚举值如下，可组合使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UIViewAnimationOptionLayoutSubviews           &#x2F;&#x2F;进行动画时布局子控件</span><br><span class="line">UIViewAnimationOptionAllowUserInteraction     &#x2F;&#x2F;进行动画时允许用户交互</span><br><span class="line">UIViewAnimationOptionBeginFromCurrentState    &#x2F;&#x2F;从当前状态开始动画</span><br><span class="line">UIViewAnimationOptionRepeat                   &#x2F;&#x2F;无限重复执行动画</span><br><span class="line">UIViewAnimationOptionAutoreverse              &#x2F;&#x2F;执行动画回路</span><br><span class="line">UIViewAnimationOptionOverrideInheritedDuration &#x2F;&#x2F;忽略嵌套动画的执行时间设置</span><br><span class="line">UIViewAnimationOptionOverrideInheritedOptions &#x2F;&#x2F;不继承父动画设置</span><br><span class="line"></span><br><span class="line">UIViewKeyframeAnimationOptionCalculationModeLinear     &#x2F;&#x2F;运算模式 :连续</span><br><span class="line">UIViewKeyframeAnimationOptionCalculationModeDiscrete   &#x2F;&#x2F;运算模式 :离散</span><br><span class="line">UIViewKeyframeAnimationOptionCalculationModePaced      &#x2F;&#x2F;运算模式 :均匀执行</span><br><span class="line">UIViewKeyframeAnimationOptionCalculationModeCubic      &#x2F;&#x2F;运算模式 :平滑</span><br><span class="line">UIViewKeyframeAnimationOptionCalculationModeCubicPaced &#x2F;&#x2F;运算模式 :平滑均匀</span><br></pre></td></tr></table></figure>
<p>各种运算模式的直观比较如下图：<br><a href="https://imgchr.com/i/r8gesA"><img src="https://s3.ax1x.com/2020/12/17/r8gesA.png" alt="r8gesA.png"></a></p>
<p>增加关键帧的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[UIView addKeyframeWithRelativeStartTime:(double)&#x2F;&#x2F;动画开始的时间（占总时间的比例）</span><br><span class="line">                        relativeDuration:(double) &#x2F;&#x2F;动画持续时间（占总时间的比例）</span><br><span class="line">                              animations:^&#123;</span><br><span class="line">                            &#x2F;&#x2F;执行的动画</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="6、转场动画"><a href="#6、转场动画" class="headerlink" title="6、转场动画"></a>6、转场动画</h4><h5 id="6-1-从旧视图转到新视图的动画效果"><a href="#6-1-从旧视图转到新视图的动画效果" class="headerlink" title="6.1 从旧视图转到新视图的动画效果"></a>6.1 从旧视图转到新视图的动画效果</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[UIView transitionFromView:(nonnull UIView *)</span><br><span class="line">                    toView:(nonnull UIView *)</span><br><span class="line">                  duration:(NSTimeInterval)</span><br><span class="line">                   options:(UIViewAnimationOptions)</span><br><span class="line">                completion:^(BOOL finished) &#123;</span><br><span class="line">                    &#x2F;&#x2F;动画执行完毕后的操作</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>在该动画过程中，fromView 会从父视图中移除，并将 toView 添加到父视图中，注意转场动画的作用对象是父视图（过渡效果体现在父视图上）。<br>调用该方法相当于执行下面两句代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[fromView.superview addSubview:toView];</span><br><span class="line">[fromView removeFromSuperview];</span><br></pre></td></tr></table></figure>
<h5 id="6-2-单个视图的过渡效果"><a href="#6-2-单个视图的过渡效果" class="headerlink" title="6.2 单个视图的过渡效果"></a>6.2 单个视图的过渡效果</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[UIView transitionWithView:(nonnull UIView *)</span><br><span class="line">                  duration:(NSTimeInterval)</span><br><span class="line">                   options:(UIViewAnimationOptions)</span><br><span class="line">                animations:^&#123;</span><br><span class="line">                &#x2F;&#x2F;执行的动画</span><br><span class="line">&#125;</span><br><span class="line">                completion:^(BOOL finished) &#123;</span><br><span class="line">                &#x2F;&#x2F;动画执行完毕后的操作</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h3 id="3、核心动画"><a href="#3、核心动画" class="headerlink" title="3、核心动画"></a>3、核心动画</h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><p>Core Animation(核心动画)是一组功能强大、效果华丽的动画API，无论在iOS系统或者在开发App的过程中，都有大量应用。<br>核心动画所在的位置如下图所示：<br><a href="https://imgchr.com/i/r828k6"><img src="https://s3.ax1x.com/2020/12/17/r828k6.png" alt="r828k6.png"></a><br>可以看到，核心动画位于UIKit的下一层，相比UIView动画，它可以实现更复杂的动画效果。<br>核心动画作用在CALayer（Core animation layer）上，CALayer从概念上类似UIView，我们可以将UIView看成是一种特殊的CALayer（可以响应事件）。<br>实际上，每一个view都有其对应的layer，这个layer是root layer：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@property(nonatomic,readonly,strong)                CALayer  *layer;</span><br></pre></td></tr></table></figure>

<p>给view加上动画，本质上是对其layer进行操作，layer包含了各种支持动画的属性，动画则包含了属性变化的值、变化的速度、变化的时间等等，两者结合产生动画的过程。<br>核心动画和UIView动画的对比：UIView动画可以看成是对核心动画的封装，和UIView动画不同的是，通过核心动画改变layer的状态（比如position），动画执行完毕后实际上是没有改变的（表面上看起来已改变）。</p>
<h5 id="2、核心动画优点："><a href="#2、核心动画优点：" class="headerlink" title="2、核心动画优点："></a>2、核心动画优点：</h5><p>1）性能强大，使用硬件加速，可以同时向多个图层添加不同的动画效果<br>2）接口易用，只需要少量的代码就可以实现复杂的动画效果。<br>3）运行在后台线程中，在动画过程中可以响应交互事件（UIView动画默认动画过程中不响应交互事件）。</p>
<h5 id="3、核心动画类的层次结构："><a href="#3、核心动画类的层次结构：" class="headerlink" title="3、核心动画类的层次结构："></a>3、核心动画类的层次结构：</h5><p><a href="https://imgchr.com/i/r82B7t"><img src="https://s3.ax1x.com/2020/12/17/r82B7t.png" alt="r82B7t.png"></a></p>
<p>CAAnimation是所有动画对象的父类，实现CAMediaTiming协议，负责控制动画的时间、速度和时间曲线等等，是一个抽象类，不能直接使用。<br>CAPropertyAnimation ：是CAAnimation的子类，它支持动画地显示图层的keyPath，一般不直接使用。<br>iOS9.0之后新增CASpringAnimation类，它实现弹簧效果的动画，是CABasicAnimation的子类。<br>核心动画类中可以直接使用的类有：<br>CABasicAnimation<br>CAKeyframeAnimation<br>CATransition<br>CAAnimationGroup<br>CASpringAnimation</p>
<h5 id="4、详细介绍"><a href="#4、详细介绍" class="headerlink" title="4、详细介绍"></a>4、详细介绍</h5><h6 id="1）CAAnimation"><a href="#1）CAAnimation" class="headerlink" title="1）CAAnimation"></a>1）CAAnimation</h6><p>CAAnimation是所有动画对象的父类，负责控制动画的持续时间和速度，是个抽象类，不能直接使用，应该使用它具体的子类<br>属性解读</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>duration</td>
<td>动画的持续时间</td>
</tr>
<tr>
<td>repeatCount</td>
<td>重复次数，无限循环可以设置HUGE_VALF或者MAXFLOAT</td>
</tr>
<tr>
<td>repeatDuration</td>
<td>重复时间</td>
</tr>
<tr>
<td>beginTime</td>
<td>可以用来设置动画延迟执行时间，若想延迟2s，就设置CACurrentMediaTime()+2，CACurrentMediaTime()为图层的 当前时间</td>
</tr>
<tr>
<td>autoreverses</td>
<td>动画自动逆向执行，默认为No</td>
</tr>
<tr>
<td>speed</td>
<td>动画执行速度</td>
</tr>
<tr>
<td>removedOnCompletion</td>
<td>动画的持续时间</td>
</tr>
<tr>
<td>duration</td>
<td>默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态，那就设置为NO，不过还要设置fillMode为kCAFillModeForwards</td>
</tr>
<tr>
<td>fillMode</td>
<td>决定当前对象在非active时间段的行为。比如动画开始之前或者动画结束之后</td>
</tr>
<tr>
<td>timingFunction</td>
<td>速度控制函数，控制动画运行的节奏，例：anima.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn]</td>
</tr>
<tr>
<td>delegate</td>
<td>动画代理，监听动画的开始和结束</td>
</tr>
</tbody></table>
<ul>
<li><p>fillMode属性值（要想fillMode有效，最好设置removedOnCompletion = NO）<br>kCAFillModeRemoved这个是默认值，也就是说当动画开始前和动画结束后，动画对layer都没有影响，动画结束后，layer会恢复到之前的状态<br>CAFillModeForwards 当动画结束后，layer会一直保持着动画最后的状态<br>kCAFillModeBackwards 在动画开始前，只需要将动画加入了一个layer，layer便立即进入动画的初始状态并等待动画开始。<br>kCAFillModeBoth这个其实就是上面两个的合成.动画加入后开始之前，layer便处于动画初始状态，动画结束后layer保持动画最后的状态</p>
</li>
<li><p>速度控制函数(CAMediaTimingFunction)<br><code>kCAMediaTimingFunctionLinear（线性）</code>：匀速，给你一个相对静态的感觉<br><code>kCAMediaTimingFunctionEaseIn（渐进）</code>：动画缓慢进入，然后加速离开<br><code>kCAMediaTimingFunctionEaseOut（渐出）</code>：动画全速进入，然后减速的到达目的地<br><code>kCAMediaTimingFunctionEaseInEaseOut</code>（渐进渐出）：动画缓慢的进入，中间加速，然后减速的到达目的地。这个是默认的动画行为。 </p>
</li>
<li><p>delegate：动画代理<br>代理方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)animationDidStart:(CAAnimation *)anim;  &#x2F;&#x2F;动画开始</span><br><span class="line">- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag; &#x2F;&#x2F;动画结束</span><br></pre></td></tr></table></figure>
<h4 id="核心动画类的核心方法："><a href="#核心动画类的核心方法：" class="headerlink" title="核心动画类的核心方法："></a>核心动画类的核心方法：</h4><h5 id="1-初始化CAAnimation对象一般使用animation方法生成实例"><a href="#1-初始化CAAnimation对象一般使用animation方法生成实例" class="headerlink" title="1.初始化CAAnimation对象一般使用animation方法生成实例"></a>1.初始化CAAnimation对象一般使用animation方法生成实例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> + (instancetype)animation;</span><br><span class="line">如果是CAPropertyAnimation的子类，还可以通过animationWithKeyPath生成实例</span><br><span class="line"> + (instancetype)animationWithKeyPath:(nullable NSString *)path;</span><br></pre></td></tr></table></figure>
<h5 id="2-设置动画的相关属性"><a href="#2-设置动画的相关属性" class="headerlink" title="2.设置动画的相关属性"></a>2.设置动画的相关属性</h5><p>设置动画的执行时间，执行曲线，keyPath的目标值，代理等等</p>
<h5 id="3-动画的添加和移除"><a href="#3-动画的添加和移除" class="headerlink" title="3.动画的添加和移除"></a>3.动画的添加和移除</h5><p>调用CALayer的addAnimation:forKey:方法将动画添加到CALayer中，这样动画就开始执行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> - (void)addAnimation:(CAAnimation *)anim forKey:(nullable NSString *)key;</span><br><span class="line">调用CALayer的removeAnimation方法停止CALayer中的动画</span><br><span class="line"> - (void)removeAnimationForKey:(NSString *)key;</span><br><span class="line"> - (void)removeAllAnimations;</span><br></pre></td></tr></table></figure>
<h5 id="４-核心动画类的常用属性"><a href="#４-核心动画类的常用属性" class="headerlink" title="４.核心动画类的常用属性"></a>４.核心动画类的常用属性</h5><p>keyPath：可以指定keyPath为CALayer的属性值，并对它的值进行修改，以达到对应的动画效果，需要注意的是部分属性值是不支持动画效果的。<br>以下是具有动画效果的keyPath：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;CATransform3D Key Paths : (example)transform.rotation.z</span><br><span class="line">&#x2F;&#x2F;rotation.x</span><br><span class="line">&#x2F;&#x2F;rotation.y</span><br><span class="line">&#x2F;&#x2F;rotation.z</span><br><span class="line">&#x2F;&#x2F;rotation 旋轉</span><br><span class="line">&#x2F;&#x2F;scale.x</span><br><span class="line">&#x2F;&#x2F;scale.y</span><br><span class="line">&#x2F;&#x2F;scale.z</span><br><span class="line">&#x2F;&#x2F;scale 缩放</span><br><span class="line">&#x2F;&#x2F;translation.x</span><br><span class="line">&#x2F;&#x2F;translation.y</span><br><span class="line">&#x2F;&#x2F;translation.z</span><br><span class="line">&#x2F;&#x2F;translation 平移</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;CGPoint Key Paths : (example)position.x</span><br><span class="line">&#x2F;&#x2F;x</span><br><span class="line">&#x2F;&#x2F;y</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;CGRect Key Paths : (example)bounds.size.width</span><br><span class="line">&#x2F;&#x2F;origin.x</span><br><span class="line">&#x2F;&#x2F;origin.y</span><br><span class="line">&#x2F;&#x2F;origin</span><br><span class="line">&#x2F;&#x2F;size.width</span><br><span class="line">&#x2F;&#x2F;size.height</span><br><span class="line">&#x2F;&#x2F;size</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;opacity</span><br><span class="line">&#x2F;&#x2F;backgroundColor</span><br><span class="line">&#x2F;&#x2F;cornerRadius </span><br><span class="line">&#x2F;&#x2F;borderWidth</span><br><span class="line">&#x2F;&#x2F;contents </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Shadow Key Path:</span><br><span class="line">&#x2F;&#x2F;shadowColor </span><br><span class="line">&#x2F;&#x2F;shadowOffset </span><br><span class="line">&#x2F;&#x2F;shadowOpacity </span><br><span class="line">&#x2F;&#x2F;shadowRadius </span><br></pre></td></tr></table></figure>
<h5 id="2-CAPropertyAnimation"><a href="#2-CAPropertyAnimation" class="headerlink" title="2)   CAPropertyAnimation"></a>2)   CAPropertyAnimation</h5><p>CAPropertyAnimation也是一个抽象类，自身并不能对layer进行动画操作，需要其子类<br>CABasicAnimation和CAKeyframeAnimation来实现动画操作。<br>属性解读：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>keyPath</td>
<td>指定接收层动画的动画类型</td>
</tr>
<tr>
<td>cumulative</td>
<td>下一次动画执行是否接着刚才的动画，默认为false</td>
</tr>
<tr>
<td>additive</td>
<td>如何处理多个动画在同一时间段执行的结果，若为true，同一时间段的动画合成为一个动画，默认为false。（使用 CAKeyframeAnimation 时必须将该属性指定为 true ，否则不会出现期待的结果）</td>
</tr>
</tbody></table>
<h5 id="3）CABasicAnimation-——-基本动画"><a href="#3）CABasicAnimation-——-基本动画" class="headerlink" title="3）CABasicAnimation —— 基本动画"></a>3）CABasicAnimation —— 基本动画</h5><p>基本动画，是CAPropertyAnimation的子类</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>fromValue</td>
<td>NSValue类型，keyPath相应属性的初始值</td>
</tr>
<tr>
<td>toValue</td>
<td>NSValue类型， keyPath相应属性的结束值</td>
</tr>
</tbody></table>
<p>CABasicAnimation可以设定keyPath的起点，终点的值，动画会沿着设定点进行移动，CABasicAnimation可以看成是只有两个关键点的特殊的CAKeyFrameAnimation。<br>动画过程说明：<br>随着动画的进行，在长度为duration的持续时间内，keyPath相应属性的值从fromValue渐渐地变为toValue<br>keyPath内容是CALayer的可动画Animatable属性<br>如果fillMode==kCAFillModeForwards同时removedOnComletion=NO，那么在动画执行完毕后，图层会保持显示动画执行后的状态。但在实质上，图层的属性值还是动画执行前的初始值，并没有真正被改变。</p>
<h5 id="4）CAKeyframeAnimation-——-关键帧动画"><a href="#4）CAKeyframeAnimation-——-关键帧动画" class="headerlink" title="4）CAKeyframeAnimation —— 关键帧动画"></a>4）CAKeyframeAnimation —— 关键帧动画</h5><p>关键帧动画，也是CAPropertyAnimation的子类，与CABasicAnimation的区别是：<br><code>CABasicAnimation</code>:只能从一个数值（fromValue）变到另一个数值（toValue）<br><code>CAKeyframeAnimation</code>:会使用一个NSArray保存这些数值。<br>可以设定keyPath起点、中间关键点（不止一个）、终点的值，每一帧所对应的时间，动画会沿着设定点进行移动。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>values</td>
<td>NSArray类型，里面的元素（NSValue）称为“关键帧”(keyframe)。动画对象会在指定的时间（duration）内，依次显示values数组中的每一个关键帧</td>
</tr>
<tr>
<td>path</td>
<td>可以设置一个CGPathRef、CGMutablePathRef，让图层按照路径轨迹移动。path只对CALayer的anchorPoint和position起作用。如果设置了path，那么values将被忽略</td>
</tr>
<tr>
<td>keyTimes</td>
<td>NSArray类型，可以为对应的关键帧指定对应的时间点，其取值范围为0到1.0，keyTimes中的每一个时间值都对应values中的每一帧。如果没有设置keyTimes，各个关键帧的时间是平分的</td>
</tr>
</tbody></table>
<h5 id="5）CAAnimationGroup-——-动画组"><a href="#5）CAAnimationGroup-——-动画组" class="headerlink" title="5）CAAnimationGroup —— 动画组"></a>5）CAAnimationGroup —— 动画组</h5><p>动画组，是CAAnimation的子类，可以保存一组动画对象，将CAAnimationGroup对象加入layer层后，组中所有动画对象可以同时并发运行</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>animations</td>
<td>用来保存一组动画对象的NSArray。默认情况下，一组动画对象是同时运行的，也可以通过设置各个动画对象的beginTime属性来更改动画的开始时间</td>
</tr>
</tbody></table>
<h5 id="6）CASpringAnimation-——-弹性动画"><a href="#6）CASpringAnimation-——-弹性动画" class="headerlink" title="6）CASpringAnimation —— 弹性动画"></a>6）CASpringAnimation —— 弹性动画</h5><p>CASpringAnimation是iOS9.0新加入动画类型，是CABasicAnimation的子类，用于实现弹簧动画。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>mass</td>
<td>质量（影响弹簧的惯性，质量越大，弹簧惯性越大，运动的幅度越大）</td>
</tr>
<tr>
<td>stiffness</td>
<td>弹性系数（弹性系数越大，弹簧的运动越快）</td>
</tr>
<tr>
<td>damping</td>
<td>阻尼系数（阻尼系数越大，弹簧的停止越快）</td>
</tr>
<tr>
<td>initialVelocity</td>
<td>初始速率（弹簧动画的初始速度大小，弹簧运动的初始方向与初始速率的正负一致，若初始速率为0，表示忽略该属性）</td>
</tr>
<tr>
<td>settlingDuration</td>
<td>结算时间（根据动画参数估算弹簧开始运动到停止的时间，动画设置的时间最好根据此时间来设置）</td>
</tr>
</tbody></table>
<p>CASpringAnimation和UIView的SpringAnimation对比：</p>
<ol>
<li>CASpringAnimation 可以设置更多影响弹簧动画效果的属性，可以实现更复杂的弹簧动画效果，且可以和其他动画组合。</li>
<li>UIView的SpringAnimation实际上就是通过CASpringAnimation来实现。</li>
</ol>
<h5 id="7）CATransition"><a href="#7）CATransition" class="headerlink" title="7）CATransition"></a>7）CATransition</h5><p>最后讲一下事务，在核心动画里面存在事务（CATransaction）这样一个概念，它负责协调多个动画原子更新显示操作。<br>简单来说事务是核心动画里面的一个基本的单元，动画的产生必然伴随着layer的Animatable属性的变化，而layer属性的变化必须属于某一个事务。<br>因此，核心动画依赖事务。</p>
<ul>
<li>事务的作用：保证一个或多个layer的一个或多个属性变化同时进行</li>
<li>事务分为隐式和显式：</li>
</ul>
<p>1.隐式：没有明显调用事务的方法，由系统自动生成事务。比如直接设置一个layer的position属性，则会在当前线程自动生成一个事务，并在下一个runLoop中自动commit事务。<br>2.显式：明显调用事务的方法（[CATransaction begin]和[CATransaction commit]）</p>
<p>CA事务的可设置属性（会覆盖隐式动画的设置）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">animationDuration：动画时间</span><br><span class="line">animationTimingFunction：动画时间曲线</span><br><span class="line">disableActions：是否关闭动画</span><br><span class="line">completionBlock：动画执行完毕的回调</span><br></pre></td></tr></table></figure>

<p>事务支持嵌套使用：当最外层的事务commit后动画才会开始。</p>
<p>注意：只有非root layer才有隐式动画，根layer（rootLayer）类似于UIView中的一个layer层，非RootLayer层就是自己创建的layer层。<br>可以设置隐式动画关闭。当在设置隐式动画的动画效果时候，需要在提交的commit方法前面实现，否则，没有动画效果。如上面例子中的，在设置layer的position属性时候，没有提交上去，因此，效果图中的layer有一个瞬移的效果。</p>
<p>注意：如果父视图中的两个子视图互相切换，转场动画应加给父视图！</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>动画过渡类型</td>
</tr>
<tr>
<td>subtype</td>
<td>动画过渡方向</td>
</tr>
<tr>
<td>startProgress</td>
<td>动画起点(在整体动画的百分比)</td>
</tr>
<tr>
<td>endProgress</td>
<td>动画终点(在整体动画的百分比)</td>
</tr>
</tbody></table>
<p>动画过渡类型:<br>type的enum值如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">kCATransitionFade 渐变</span><br><span class="line">kCATransitionMoveIn 覆盖</span><br><span class="line">kCATransitionPush 推出</span><br><span class="line">kCATransitionReveal 揭开</span><br></pre></td></tr></table></figure>

<p>动画过渡方向<br>subtype的enum值如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kCATransitionFromRight 从右边</span><br><span class="line">kCATransitionFromLeft 从左边</span><br><span class="line">kCATransitionFromTop 从顶部</span><br><span class="line">kCATransitionFromBottom 从底部</span><br></pre></td></tr></table></figure>



<p>还有一些私有动画类型，效果很炫酷，不过不推荐使用。私有动画类型的值有：”cube”、”suckEffect”、”oglFlip”、 “rippleEffect”、”pageCurl”、”pageUnCurl”等等。</p>
<h4 id="Written-By-多点-移动运营研发部-李涛"><a href="#Written-By-多点-移动运营研发部-李涛" class="headerlink" title="Written By 多点-移动运营研发部-李涛"></a>Written By 多点-移动运营研发部-李涛</h4>]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>动画相关</tag>
      </tags>
  </entry>
</search>
